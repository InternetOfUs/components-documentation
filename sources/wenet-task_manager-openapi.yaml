openapi: 3.0.1
info:
  title: WeNet - Task manager API
  description: "The task manager component is the one responsible for storing and\
    \ maintaining the task and task types. \nA task is used to coordinate a set of\
    \ WeNet users to do something. It is defined by the next fields:\n\n - __id__\
    \  identifier of the task.\n - __goal__  the objective to reach. In other words\
    \ why the users cooperate.\n - __requesterId__  the identifier of the user that\
    \ has created the task.\n - ___creationTs__  the difference, measured in seconds,\
    \ between the time when the task\n  is created and midnight, January 1, 1970 UTC.\n\
    \ - ___lastUpdateTs__  the difference, measured in seconds, between the time when\
    \ the task\n  is updated and midnight, January 1, 1970 UTC.\n - __closeTs__  the\
    \ difference, measured in seconds, between the time when the task\n  is considered\
    \ done (closed) and midnight, January 1, 1970 UTC.\n - __appId__  identifier of\
    \ the application where the task is associated.\n - __communityId__  identifier\
    \ of the community where the task is associated.\n - __taskTypeId__  identifier\
    \ of the type. It defines the common behaviours\n  allowed to the users when interacting\
    \ on the task.\n - __attributes__  the JSON object with the values that instantiate\
    \ the task.\n  The possible values are defined by the type.\n - __norms__  that\
    \ modify the default behaviour defined by the type. If you want\n to read more\
    \ about how to define norms read the [WeNet developer documentation](https://internetofus.github.io/developer/docs/tech/conversation/norms)\n\
    \ - __transactions__  the historic list of transactions that have been done in\n\
    \  the task. Also, each transaction has the information of the application messages\n\
    \  that have been sent to the users that are involved in the task.\n \nOn the\
    \ other hand, the task type defines what the users can do in a task. For this\
    \ purpose has the next fields:\n\n - __id__  identifier of the task type.\n -\
    \ __name__  of the type.\n - __description__  of the type.\n - __keywords__  used\
    \ to define the type.\n - __attributes__  is a JSON object where the fields are\
    \ the possible attributes\n  of the task, and the value is the name is the OpenAPI\
    \ description of the possible\n  values for the attribute.\n - __transactions__\
    \  is a JSON object where the fields are the possible labels\n of the transactions\
    \ that the users can do on the task, and the value is the\n OpenAPI description\
    \ of the attributes for the transaction.\n - __callbacks__  is a JSON object where\
    \ the fields are the possible labels\n of the messages that the norms can send\
    \ to the application for a user, and\n the value is the OpenAPI description of\
    \ the attributes for the message.\n - __norms__  that describe the possible behaviour\
    \ can do in a task of this type.\n  If you want to read more about how to define\
    \ norms read the [WeNet developer documentation](https://internetofus.github.io/developer/docs/tech/conversation/norms)\n\
    \nThe next JSON is an example of a task type that echo the received transaction\
    \ to the same user.\n```\n{\n   \"id\":\"wenet_echo_v1\",\n   \"name\":\"Echo\"\
    ,\n   \"description\":\"This tasks echo the transaction messages\",\n   \"keywords\"\
    :[\n      \"example\",\n      \"test\"\n   ],\n   \"transactions\":{\n      \"\
    echo\":{\n         \"type\":\"object\",\n         \"description\":\"Send the echo\
    \ message\",\n         \"properties\":{\n            \"message\":{\n         \
    \      \"type\":\"string\",\n               \"description\":\"The message to echo\"\
    \n            }\n         }\n      }\n   },\n   \"callbacks\":{\n      \"echo\"\
    :{\n         \"type\":\"object\",\n         \"properties\":{\n            \"taskId\"\
    :{\n               \"type\":\"string\",\n               \"description\":\"The\
    \ identifier of the task\"\n            },\n            \"communityId\":{\n  \
    \             \"type\":\"string\",\n               \"description\":\"The identifier\
    \ of the community\"\n            },\n            \"message\":{\n            \
    \   \"type\":\"string\",\n               \"description\":\"The echo message\"\n\
    \            }\n         }\n      }\n   },\n   \"norms\":[\n      {\n        \
    \ \"whenever\":\"is_received_created_task()\",\n         \"thenceforth\":\"add_created_transaction()\"\
    \n      },\n      {\n         \"whenever\":\"is_received_do_transaction('echo',Content)\"\
    ,\n         \"thenceforth\":\"add_message_transaction() and send_user_message('echo',Content)\"\
    \n      }\n   ]\n}\n```"
  contact:
    name: "Bruno Rosell i Gui (UDT-IA, IIIA-CSIC)"
    email: rosell@iiia.csic.es
  license:
    name: Apache V2
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 0.7.0
servers:
- url: https://internetofus.u-hopper.com/prod/task_manager
  description: Production instance
- url: https://wenet.u-hopper.com/dev/task_manager
  description: Staging instance
- url: http://ardid.iiia.csic.es/wenet/task-manager/prod/
  description: IIIA production server
- url: http://ardid.iiia.csic.es/wenet/task-manager/dev/
  description: IIIA development server
tags:
- name: Tasks
  description: The functionality provided allows to manage the tasks.
- name: Task Types
  description: The functionality provided allows to manage the task types.
- name: Task Transactions
  description: The functionality provided allows to modify a task by a transaction.
- name: Norms
  description: The functionality provided allows to manage the norms of a component.
- name: Other
  description: Other services provided by the API.
paths:
  /help/info:
    get:
      tags:
      - Other
      summary: Get the information about the API
      description: Return the relevant information of the API implementation
      operationId: getInfo
      responses:
        "200":
          description: The API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
  /help/openapi.yaml:
    get:
      tags:
      - Other
      summary: Get the Open API description
      description: Return the Open API description of this API
      operationId: getOpenApi
      responses:
        "200":
          description: The API description
  /messages:
    get:
      tags:
      - Tasks
      - Messages
      summary: Search for some messages
      description: Allow to get a page of messages with the specified query parameters.
      operationId: retrieveMessagesPage
      parameters:
      - name: appId
        in: query
        description: "An application identifier to be equals on the task where are\
          \ the messages to return. You can use a Perl compatible regular expressions\
          \ (PCRE) that has to match the application identifier of the tasks if you\
          \ write between '/'. For example to get the messages on the tasks for the\
          \ applications '1' and '2' you must pass as 'appId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1
      - name: requesterId
        in: query
        description: "An user identifier to be equals on the task where are the messages\
          \ to return. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the requester identifier of the tasks if you write between\
          \ '/'. For example to get the messages on the tasks for the requesters '1'\
          \ and '2' you must pass as 'requesterId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: taskTypeId
        in: query
        description: "A task type identifier to be equals on the task where are the\
          \ messages to return. You can use a Perl compatible regular expressions\
          \ (PCRE) that has to match the task type identifier of the tasks if you\
          \ write between '/'. For example to get the messages on the tasks for the\
          \ types '1' and '2' you must pass as 'taskTypeId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: goalName
        in: query
        description: A goal name to be equals on the task where are the messages to
          return. You can use a Perl compatible regular expressions (PCRE) that has
          to match the goal name of the tasks if you write between '/'. For example
          to get the messages on the tasks with a goal name with the word 'eat' you
          must pass as 'goalName' '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: goalDescription
        in: query
        description: A goal description to be equals on the task where are the messages
          to return. You can use a Perl compatible regular expressions (PCRE) that
          has to match the goal description of the tasks if you write between '/'.
          For example to get the messages on the tasks with a goal description with
          the word 'eat' you must pass as 'goalDescription' '/.*question.*/'
        schema:
          type: string
        example: /.*question.*/
      - name: goalKeywords
        in: query
        description: "A set of keywords to be defined on the task where are the messages\
          \ to return. For each keyword is separated by a ',' and each field keyword\
          \ can be between '/' to use a Perl compatible regular expressions (PCRE)\
          \ instead the exact value."
        style: form
        schema:
          type: string
        example: "key1,/.*eat.*/,key3"
      - name: taskCreationFrom
        in: query
        description: "The difference, measured in seconds, between the minimum creation\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1957166440
      - name: taskCreationTo
        in: query
        description: "The difference, measured in seconds, between the maximum creation\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1581664406
      - name: taskUpdateFrom
        in: query
        description: "The difference, measured in seconds, between the minimum update\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1477166440
      - name: taskUpdateTo
        in: query
        description: "The difference, measured in seconds, between the maximum update\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1561664406
      - name: hasCloseTs
        in: query
        description: "This is 'true' if the task where are the transaction to return\
          \ has defined a 'closeTs', or 'false' if this fiels is not defined. In other\
          \ words, get the transaction from closed or open tasks."
        schema:
          type: boolean
        example: false
      - name: closeFrom
        in: query
        description: "The difference, measured in seconds, between the minimum close\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1447166440
      - name: closeTo
        in: query
        description: "The difference, measured in seconds, between the maximum close\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 155664406
      - name: taskId
        in: query
        description: "A task identifier to be equals on the task where are the messages\
          \ to return. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the task identifier of the tasks if you write between '/'.\
          \ For example to get the messages for the tasks '1' and '2' you must pass\
          \ as 'taskId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: transactionId
        in: query
        description: "A identifier to be equals on the transaction where are the messages\
          \ to return. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the id on the transactions where are the messages to return\
          \ if you write between '/'. For example to get the messages of the transactions\
          \ with the identifiers '1' and '2' you must pass as 'id' '/^[1|2]$/'."
        schema:
          type: string
        example: accept
      - name: transactionLabel
        in: query
        description: "A label to be equals on the transaction where are the messages\
          \ to return. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the label on the transactions where are the messages to return\
          \ if you write between '/'. For example to get the messages of the transactions\
          \ with the labels 'accept' and 'decline' you must pass as 'label' '/^[accept|decline]$/'."
        schema:
          type: string
        example: accept
      - name: transactionActioneerId
        in: query
        description: "A user identifier that has done the transactions where are the\
          \ messages to return. You can use a Perl compatible regular expressions\
          \ (PCRE) that has to match the actioneer if you write between '/'. For example\
          \ to get the messages of the transactions that has done the users '1' and\
          \ '2' you must pass as 'actioneerId' '/^[1|2]$/'."
        schema:
          type: string
        example: accept
      - name: transactionCreationFrom
        in: query
        description: "The difference, measured in seconds, between the minimum creation\
          \ time stamp of the transaction where are the messages to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: transactionCreationTo
        in: query
        description: "The difference, measured in seconds, between the maximum creation\
          \ time stamp of the transaction where are the messages to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: transactionUpdateFrom
        in: query
        description: "The difference, measured in seconds, between the minimum update\
          \ time stamp of the transaction where are the messages to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: transactionUpdateTo
        in: query
        description: "The difference, measured in seconds, between the maximum update\
          \ time stamp of the transaction where are the messages to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: receiverId
        in: query
        description: "A user identifier that has received the messages to return.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the receiver if you write between '/'. For example to get the messages\
          \ that has received the users '1' and '2' you must pass as 'receiverId'\
          \ '/^[1|2]$/'."
        schema:
          type: string
        example: accept
      - name: label
        in: query
        description: "A label to be equals on the messages to return. You can use\
          \ a Perl compatible regular expressions (PCRE) that has to match the label\
          \ on the messages to return if you write between '/'. For example to get\
          \ the messages with the labels 'accept' and 'decline' you must pass as 'label'\
          \ '/^[accept|decline]$/'."
        schema:
          type: string
        example: accept
      - name: order
        in: query
        description: "The order in witch the messages have to be returned. For each\
          \ field it has be separated by a ',' and each field can start with '+' (or\
          \ without it) to order on ascending order, or with the prefix '-' to do\
          \ on descendant order."
        style: form
        schema:
          type: string
        example: "goal.name,-goal.description,+appId"
      - name: offset
        in: query
        description: The index of the first message to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of messages to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The page with the matching messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesPage'
        "400":
          description: If any of the search pattern is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /taskTransactions:
    get:
      tags:
      - Tasks
      - Task Transactions
      summary: Search for some transactions
      description: Allow to get a page of transactions with the specified query parameters.
      operationId: retrieveTaskTransactionsPage
      parameters:
      - name: appId
        in: query
        description: "An application identifier to be equals on the task where are\
          \ the transactions to return. You can use a Perl compatible regular expressions\
          \ (PCRE) that has to match the application identifier of the tasks if you\
          \ write between '/'. For example to get the transactions on the tasks for\
          \ the applications '1' and '2' you must pass as 'appId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1
      - name: requesterId
        in: query
        description: "An user identifier to be equals on the task where are the transactions\
          \ to return. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the requester identifier of the tasks if you write between\
          \ '/'. For example to get the transactions on the tasks for the requesters\
          \ '1' and '2' you must pass as 'requesterId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: taskTypeId
        in: query
        description: "A task type identifier to be equals on the task where are the\
          \ transactions to return. You can use a Perl compatible regular expressions\
          \ (PCRE) that has to match the task type identifier of the tasks if you\
          \ write between '/'. For example to get the transactions on the tasks for\
          \ the types '1' and '2' you must pass as 'taskTypeId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: goalName
        in: query
        description: A goal name to be equals on the task where are the transactions
          to return. You can use a Perl compatible regular expressions (PCRE) that
          has to match the goal name of the tasks if you write between '/'. For example
          to get the transactions on the tasks with a goal name with the word 'eat'
          you must pass as 'goalName' '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: goalDescription
        in: query
        description: A goal description to be equals on the task where are the transactions
          to return. You can use a Perl compatible regular expressions (PCRE) that
          has to match the goal description of the tasks if you write between '/'.
          For example to get the transactions on the tasks with a goal description
          with the word 'eat' you must pass as 'goalDescription' '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: goalKeywords
        in: query
        description: "A set of keywords to be defined on the task where are the transactions\
          \ to return. For each keyword is separated by a ',' and each field keyword\
          \ can be between '/' to use a Perl compatible regular expressions (PCRE)\
          \ instead the exact value."
        style: form
        schema:
          type: string
        example: "key1,/.*eat.*/,key3"
      - name: taskCreationFrom
        in: query
        description: "The difference, measured in seconds, between the minimum creation\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: taskCreationTo
        in: query
        description: "The difference, measured in seconds, between the maximum creation\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: taskUpdateFrom
        in: query
        description: "The difference, measured in seconds, between the minimum update\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: taskUpdateTo
        in: query
        description: "The difference, measured in seconds, between the maximum update\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: hasCloseTs
        in: query
        description: "This is 'true' if the task where are the transaction to return\
          \ has defined a 'closeTs', or 'false' if this fiels is not defined. In other\
          \ words, get the transaction from closed or open tasks."
        schema:
          type: boolean
        example: false
      - name: closeFrom
        in: query
        description: "The difference, measured in seconds, between the minimum close\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: closeTo
        in: query
        description: "The difference, measured in seconds, between the maximum close\
          \ time stamp of the task where are the transaction to return and midnight,\
          \ January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: taskId
        in: query
        description: "A task identifier to be equals on the task where are the transactions\
          \ to return. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the task identifier of the tasks if you write between '/'.\
          \ For example to get the transactions for the tasks '1' and '2' you must\
          \ pass as 'taskId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: id
        in: query
        description: "A identifier to be equals on the transactions to return. You\
          \ can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the identifier on the transactions to return if you write between '/'.\
          \ For example to get the transactions with the identifiers '1' and '2' you\
          \ must pass as 'id' '/^[1|2]$/'."
        schema:
          type: string
        example: accept
      - name: label
        in: query
        description: "A label to be equals on the transactions to return. You can\
          \ use a Perl compatible regular expressions (PCRE) that has to match the\
          \ label on the transactions to return if you write between '/'. For example\
          \ to get the transactions with the labels 'accept' and 'decline' you must\
          \ pass as 'label' '/^[accept|decline]$/'."
        schema:
          type: string
        example: accept
      - name: actioneerId
        in: query
        description: "A user identifier that has done the transactions to return.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the actioneer if you write between '/'. For example to get the transactions\
          \ that has done the users '1' and '2' you must pass as 'actioneerId' '/^[1|2]$/'."
        schema:
          type: string
        example: accept
      - name: creationFrom
        in: query
        description: "The difference, measured in seconds, between the minimum creation\
          \ time stamp of the transactions to return and midnight, January 1, 1970\
          \ UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: creationTo
        in: query
        description: "The difference, measured in seconds, between the maximum creation\
          \ time stamp of the transactions to return and midnight, January 1, 1970\
          \ UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: updateFrom
        in: query
        description: "The difference, measured in seconds, between the minimum update\
          \ time stamp of the transactions to return and midnight, January 1, 1970\
          \ UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: updateTo
        in: query
        description: "The difference, measured in seconds, between the maximum update\
          \ time stamp of the transactions to return and midnight, January 1, 1970\
          \ UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: order
        in: query
        description: "The order in witch the task transactions have to be returned.\
          \ For each field it has be separated by a ',' and each field can start with\
          \ '+' (or without it) to order on ascending order, or with the prefix '-'\
          \ to do on descendant order."
        style: form
        schema:
          type: string
        example: "goal.name,-goal.description,+appId"
      - name: offset
        in: query
        description: The index of the first transaction to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of transactions to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The page with the matching transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTransactionsPage'
        "400":
          description: If any of the search pattern is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /taskTypes/{taskTypeId}/norms:
    get:
      tags:
      - Norms
      - Task Types
      summary: Return the norms from a task type
      description: Allow to get all the norms defined into a task type
      operationId: retrieveTaskTypeNorms
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type where the norms are defined
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      responses:
        "200":
          description: The norms defined into the task type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Norms
      - Task Types
      summary: Add a norm into a task type
      description: Add a new norm into the norms of a task type
      operationId: addTaskTypeNorm
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to add a norm
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new norm to add
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        required: true
      responses:
        "200":
          description: The added norm
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        "400":
          description: Bad norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /taskTypes:
    get:
      tags:
      - Task Types
      summary: Search for some task types
      description: Allow to get a task type with the specified query parameters
      operationId: retrieveTaskTypesPage
      parameters:
      - name: name
        in: query
        description: A name to be equals on the task types to return. You can use
          a Perl compatible regular expressions (PCRE) that has to match the name
          of the task types to return if you write between '/'. For example to get
          the task types with a name with the word 'eat' you must pass as 'goalName'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: description
        in: query
        description: A description to be equals on the task types to return. You can
          use a Perl compatible regular expressions (PCRE) that has to match the description
          of the task types to return if you write between '/'. For example to get
          the task types with a description with the word 'eat' you must pass as 'goalDescription'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: keywords
        in: query
        description: "A set of keywords to be defined on the task types to be returned.\
          \ For each keyword is separated by a ',' and each field keyword can be between\
          \ '/' to use a Perl compatible regular expressions (PCRE) instead the exact\
          \ value."
        style: form
        schema:
          type: string
        example: "key1,/.*eat.*/,key3"
      - name: order
        in: query
        description: "The order in witch the task types has to be returned. For each\
          \ field it has be separated by a ',' and each field can start with '+' (or\
          \ without it) to order on ascending order, or with the prefix '-' to do\
          \ on descendant order."
        style: form
        schema:
          type: string
        example: "name,-description"
      - name: offset
        in: query
        description: The index of the first task type to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of task types to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The page with the matching task types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypePage'
        "400":
          description: If any of the search pattern is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Task Types
      summary: Create a task type
      description: Create a new task type
      operationId: createTaskType
      requestBody:
        description: The new task type to create
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        required: true
      responses:
        "200":
          description: The created task type
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "400":
          description: Bad task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /taskTypes/{taskTypeId}:
    get:
      tags:
      - Task Types
      summary: Return a task type associated to the identifier
      description: Allow to get a task type associated to an identifier
      operationId: retrieveTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to get
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      responses:
        "200":
          description: The task type associated to the identifier
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
      - Task Types
      summary: Modify a task type
      description: Change the attributes of a task type
      operationId: updateTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to update
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the task type
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        required: true
      responses:
        "200":
          description: The updated task type
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "400":
          description: Bad task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Task Types
      summary: Delete the task type associated to the identifier
      description: Allow to delete a task type associated to an identifier
      operationId: deleteTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to delete
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The task type was deleted successfully
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    patch:
      tags:
      - Task Types
      summary: Modify a task type
      description: Change the attributes of a task type
      operationId: mergeTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to merge
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the task type
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        required: true
      responses:
        "200":
          description: The merged task type
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "400":
          description: Bad task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /taskTypes/{taskTypeId}/norms/{index}:
    get:
      tags:
      - Norms
      - Task Types
      summary: Return a norm from a tasktype
      description: Allow to get a norm defined into a tasktype
      operationId: retrieveTaskTypeNorm
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type where the norm is defined
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      - name: index
        in: path
        description: The index of the norm to get
        required: true
        schema:
          type: integer
          format: int32
        example: 1
      responses:
        "200":
          description: The norm defined into the tasktype
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        "404":
          description: Not found tasktype or norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
      - Norms
      - Task Types
      summary: Updated a norm from a task type
      description: Update a norm defined in a task type
      operationId: updateTaskTypeNorm
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to update a norm
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      - name: index
        in: path
        description: The identifier of the norm to update
        required: true
        schema:
          type: integer
          format: int32
        example: 1
      requestBody:
        description: The new values to update a norm
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        required: true
      responses:
        "200":
          description: The updated norm
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        "400":
          description: Bad norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type or norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Norms
      - Task Types
      summary: Add a norm into a task type
      description: Add a new norm into the norms of a task type
      operationId: deleteTaskTypeNorm
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to delete a norm
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      - name: index
        in: path
        description: The identifier of the norm to delete
        required: true
        schema:
          type: integer
          format: int32
        example: 1
      responses:
        "200":
          description: The task type where has added the norm
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        "400":
          description: Bad norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type or norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    patch:
      tags:
      - Norms
      - Task Types
      summary: Merged a norm from a task type
      description: Merge a norm defined in a task type
      operationId: mergeTaskTypeNorm
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to merge a norm
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      - name: index
        in: path
        description: The identifier of the norm to merge
        required: true
        schema:
          type: integer
          format: int32
        example: 1
      requestBody:
        description: The new values to merge a norm
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        required: true
      responses:
        "200":
          description: The merged norm
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm
        "400":
          description: Bad norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type or norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/{taskId}/transactions/{taskTransactionId}/messages:
    post:
      tags:
      - Task Transactions
      - Tasks
      summary: Add a message into a transaction
      description: Called to add a message into a transaction
      operationId: addMessageIntoTransaction
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task where is the transaction
        required: true
        schema:
          type: string
      - name: taskTransactionId
        in: path
        description: The identifier of the transaction to add the message
        required: true
        schema:
          type: string
      requestBody:
        description: The message to add
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Message
        required: true
      responses:
        "201":
          description: The added message
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Message
        "400":
          description: Bad message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task or transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/{taskId}/transactions:
    post:
      tags:
      - Task Transactions
      - Tasks
      summary: Add a transaction into a task
      description: Called to add a transaction into a task
      operationId: addTransactionIntoTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to add the transaction
        required: true
        schema:
          type: string
      requestBody:
        description: The task transaction to add
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        required: true
      responses:
        "201":
          description: The added task transaction
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        "400":
          description: Bad task transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task to add the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks:
    get:
      tags:
      - Tasks
      summary: Search for some tasks
      description: Allow to get a page of task with the specified query parameters.
      operationId: retrieveTasksPage
      parameters:
      - name: appId
        in: query
        description: "An application identifier to be equals on the tasks to return.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the application identifier of the tasks to return if you write between\
          \ '/'. For example to get the tasks for the applications '1' and '2' you\
          \ must pass as 'appId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1
      - name: requesterId
        in: query
        description: "An user identifier to be equals on the tasks to return. You\
          \ can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the requester identifier of the tasks to return if you write between '/'.\
          \ For example to get the tasks for the requesters '1' and '2' you must pass\
          \ as 'requesterId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: taskTypeId
        in: query
        description: "A task type identifier to be equals on the tasks to return.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the task type identifier of the tasks to return if you write between '/'.\
          \ For example to get the tasks for the types '1' and '2' you must pass as\
          \ 'taskTypeId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1e346fd440
      - name: goalName
        in: query
        description: A goal name to be equals on the tasks to return. You can use
          a Perl compatible regular expressions (PCRE) that has to match the goal
          name of the tasks to return if you write between '/'. For example to get
          the tasks with a goal name with the word 'eat' you must pass as 'goalName'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: goalDescription
        in: query
        description: A goal description to be equals on the tasks to return. You can
          use a Perl compatible regular expressions (PCRE) that has to match the goal
          description of the tasks to return if you write between '/'. For example
          to get the tasks with a goal description with the word 'eat' you must pass
          as 'goalDescription' '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: creationFrom
        in: query
        description: "The difference, measured in seconds, between the minimum creation\
          \ time stamp of the task and midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: creationTo
        in: query
        description: "The difference, measured in seconds, between the maximum creation\
          \ time stamp of the task and midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: updateFrom
        in: query
        description: "The difference, measured in seconds, between the minimum update\
          \ time stamp of the task and midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: updateTo
        in: query
        description: "The difference, measured in seconds, between the maximum update\
          \ time stamp of the task and midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: hasCloseTs
        in: query
        description: "This is 'true' if the task to return has defined a 'closeTs',\
          \ or 'false' if this fiels is not defined. In other words, get the closed\
          \ or open tasks."
        schema:
          type: boolean
        example: false
      - name: closeFrom
        in: query
        description: "The difference, measured in seconds, between the minimum close\
          \ time stamp of the task and midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: closeTo
        in: query
        description: "The difference, measured in seconds, between the maximum close\
          \ time stamp of the task and midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: order
        in: query
        description: "The order in witch the tasks have to be returned. For each field\
          \ it has be separated by a ',' and each field can start with '+' (or without\
          \ it) to order on ascending order, or with the prefix '-' to do on descendant\
          \ order."
        style: form
        schema:
          type: string
        example: "goal.name,-goal.description,+appId"
      - name: offset
        in: query
        description: The index of the first task to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of tasks to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The page with the matching tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
        "400":
          description: If any of the search pattern is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Tasks
      summary: Create a task
      description: Create a new task
      operationId: createTask
      requestBody:
        description: The new task to create
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        required: true
      responses:
        "200":
          description: The created task
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "400":
          description: Bad task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/{taskId}:
    get:
      tags:
      - Tasks
      summary: Return a task
      description: Allow to get a task with an specific identifier
      operationId: retrieveTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to get
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      responses:
        "200":
          description: The task associated to the identifier
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
      - Tasks
      summary: Modify a task
      description: Change a task
      operationId: updateTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to update
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the task
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        required: true
      responses:
        "200":
          description: The updated task
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "400":
          description: Bad task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Tasks
      summary: Delete the task associated to the identifier
      description: Allow to delete a task associated to an identifier
      operationId: deleteTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to delete
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The task was deleted successfully
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    patch:
      tags:
      - Tasks
      summary: Modify partially a task
      description: Change some attributes of a task
      operationId: mergeTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to merge
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the task
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        required: true
      responses:
        "200":
          description: The merged task
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "400":
          description: Bad task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/transactions:
    post:
      tags:
      - Task Transactions
      - Tasks
      summary: Do a task transaction
      description: Called when when to do an action over a task
      operationId: doTaskTransaction
      requestBody:
        description: The task transaction to do
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        required: true
      responses:
        "200":
          description: The started task transaction
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        "400":
          description: Bad task transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/{taskId}/transactions/{transactionId}:
    get:
      tags:
      - Task Transactions
      - Tasks
      summary: Return a task transaction
      description: Allow to get a task transaction with an specific identifier
      operationId: retrieveTaskTransaction
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task where is the transaction to get
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      - name: transactionId
        in: path
        description: The identifier of the transaction to get
        required: true
        schema:
          type: string
        example: 1
      responses:
        "200":
          description: The task transaction associated to the identifier
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        "404":
          description: Not found task or transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    Info:
      type: object
      properties:
        name:
          type: string
          description: Contain the name of the API
          example: wenet/task-manager
        apiVersion:
          type: string
          description: Contain the implementation version number of the API
          example: 1.0.0
        softwareVersion:
          type: string
          description: Contain the implementation version number of the software
          example: 1.0.0
        vendor:
          type: string
          description: Contain information of the organization that has implemented
            the API
          example: "UDT-IA, IIIA-CSIC"
        license:
          type: string
          description: Contain information of the license of the API
          example: Apache v2
      description: Provide the version information of the API
    MessagesPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first message returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of messages that satisfies the search.
          format: int64
          example: 100
        messages:
          type: array
          description: The set of messages found
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Message
      description: Contains a set of messages
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
          description: Contain code that identifies the error
          example: error_code
        message:
          type: string
          description: Contain a brief description of the error to be read by a human
          example: Error readable by a human
      description: Inform of an error that happens when interacts with the API
    TaskTransactionsPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first transactions returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of transactions that satisfies the search.
          format: int64
          example: 100
        transactions:
          type: array
          description: The set of transactions found
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
      description: Contains a set of tasks
    TaskTypePage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first task type returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of task types that satisfies the search.
          format: int64
          example: 100
        taskTypes:
          type: array
          description: The set of task types found
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
      description: Contains a set of task types
    TaskPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first task returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of tasks that satisfies the search.
          format: int64
          example: 100
        tasks:
          type: array
          description: The set of tasks found
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/7af902b41c0d088f33ba35efd095624aa8aa6a6a/sources/wenet-models-openapi.yaml#/components/schemas/Task
      description: Contains a set of tasks
