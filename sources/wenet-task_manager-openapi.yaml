openapi: 3.0.1
info:
  title: WeNet - Task manager API
  description: |-
    The task manager component is the one responsible for storing and maintaining the task and task types, and start the actions that can modify the task state.
    A task is considered an instance of a task type. This task type contains the description of the attributes necessary to define the task, the list of possible transactions (actions) that can be done in the task,  and a set of norms that define how the task can change its state. For example a simplified task type to organize a dinner with friends, can be:
     - **Attributes**
        - **when**: the dinner will be
        - **where**: the dinner will be.
     - **Transactions**
        - **accept**: when an user accepts to attend the dinner.
        - **decline**:when an user declines to attend the dinner.
        - **close**: when no more users can apply to be on the dinner.
        - **cancel**:when the user that organizes the dinner cancels.
     - **Norms**
        - When task created therefore notify my friends to participate and mark as open and add friends to unanswered
        - When user accept therefore inform task requester user accepts and add user to attenders and remove from unanswered
        - When user declines therefore inform add user to declined and remove from unanswered
        - When requester close therefore inform to accepted friends that the dinner is set and unanswered friend that the dinner is cancelled and mark it as closed
        - When requester cancel therefore inform to accepted and unanswered friend that the dinner is cancelled and mark it as closed

    So the attributes a task of this type when some users has accepted an others has declined, can be:
     - **when**: Saturday night
     - **where**: Giorgios restaurant on the main street
     - **state**: Open
     - **unanswered**: User2, User89, user78
     - **declined**: User67
     - **attenders**: User1, User34

    The transactions can be considered as asynchronous actions that can be done to change the task state. When an user, an application or other WeNet component wants to change the state of a task, it has to post a transaction to the task manager. It checks that  the transaction is correct according to the task type, and after that the transaction is sent to the interaction protocol engine to verify the task, community and user norms. In other words, the changes of the state are done by the norms that are evaluated on the interaction protocol engine, and not by the task manager after receiving a transaction.
  contact:
    name: Bruno Rosell i Gui (UDT-IA, IIIA-CSIC)
    email: rosell@iiia.csic.es
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.3.2
servers:
- url: https://wenet.u-hopper.com/prod/task_manager
  description: WeNet production server
- url: https://wenet.u-hopper.com/dev/task_manager
  description: WeNet development server server
- url: http://ardid.iiia.csic.es/wenet/task-manager/0.3/
  description: IIIA development server
tags:
- name: Other
  description: Other services provided by the API.
- name: Tasks
  description: The functionality provided allows to manage the tasks.
- name: Task Types
  description: The functionality provided allows to manage the task types.
- name: Task Transactions
  description: The functionality provided allows to modify a task by a transaction.
paths:
  /tasks:
    get:
      tags:
      - Tasks
      summary: Search for some tasks
      description: Allow to get a page of task with the specified query parameters.
      operationId: retrieveTasksPage
      parameters:
      - name: appId
        in: query
        description: An application identifier to be equals on the tasks to return.
          You can use a Perl compatible regular expressions (PCRE) that has to match
          the application identifier of the tasks to return if you write between '/'.
          For example to get the tasks for the aplications '1' and '2' you must pass
          as 'appId' '/^[1|2]$/'.
        schema:
          type: string
        example: 1
      - name: requesterId
        in: query
        description: An user identifier to be equals on the tasks to return. You can
          use a Perl compatible regular expressions (PCRE) that has to match the requester
          identifier of the tasks to return if you write between '/'. For example
          to get the tasks for the requesters '1' and '2' you must pass as 'requesterId'
          '/^[1|2]$/'.
        schema:
          type: string
        example: 1e346fd440
      - name: taskTypeId
        in: query
        description: A task type identifier to be equals on the tasks to return. You
          can use a Perl compatible regular expressions (PCRE) that has to match the
          task type identifier of the tasks to return if you write between '/'. For
          example to get the tasks for the types '1' and '2' you must pass as 'taskTypeId'
          '/^[1|2]$/'.
        schema:
          type: string
        example: 1e346fd440
      - name: goalName
        in: query
        description: A goal name to be equals on the tasks to return. You can use
          a Perl compatible regular expressions (PCRE) that has to match the goal
          name of the tasks to return if you write between '/'. For example to get
          the tasks with a goal name with the word 'eat' you must pass as 'goalName'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: goalDescription
        in: query
        description: A goal description to be equals on the tasks to return. You can
          use a Perl compatible regular expressions (PCRE) that has to match the goal
          description of the tasks to return if you write between '/'. For example
          to get the tasks with a goal description with the word 'eat' you must pass
          as 'goalDescription' '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: startFrom
        in: query
        description: The difference, measured in seconds, between the minimum start
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: startTo
        in: query
        description: The difference, measured in seconds, between the maximum start
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: endFrom
        in: query
        description: The difference, measured in seconds, between the minimum end
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: endTo
        in: query
        description: The difference, measured in seconds, between the maximum end
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: deadlineFrom
        in: query
        description: The difference, measured in seconds, between the minimum deadline
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: deadlineTo
        in: query
        description: The difference, measured in seconds, between the maximum deadline
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: hasCloseTs
        in: query
        description: This is 'true' if the task to return has defined a 'closeTs',
          or 'false' if this fiels is not defined. In other words, get the closed
          or open tasks.
        schema:
          type: boolean
        example: false
      - name: closeFrom
        in: query
        description: The difference, measured in seconds, between the minimum close
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: closeTo
        in: query
        description: The difference, measured in seconds, between the maximum close
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: order
        in: query
        description: The order in witch the task has to be returned. For each filed
          it has be separated by a ',' and each field can start with '+' (or without
          it) to order on ascending order, or with the prefix '-' to do on descendant
          order.
        schema:
          type: array
          items:
            type: string
        example: goal.name,-goal.description,+appId
      - name: offset
        in: query
        description: The index of the first task to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of tasks to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The task associated to the identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPage'
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Tasks
      summary: Create a task
      description: Create a new task
      operationId: createTask
      requestBody:
        description: The new task to create
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task
        required: true
      responses:
        "200":
          description: The created task
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "400":
          description: Bad task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/{taskId}:
    get:
      tags:
      - Tasks
      summary: Return a task
      description: Allow to get a task with an specific identifier
      operationId: retrieveTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to get
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      responses:
        "200":
          description: The task associated to the identifier
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
      - Tasks
      summary: Modify a task
      description: Change the attributes of a task
      operationId: updateTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to update
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the task
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task
        required: true
      responses:
        "200":
          description: The updated task
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "400":
          description: Bad task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Tasks
      summary: Delete the task associated to the identifier
      description: Allow to delete a task associated to an identifier
      operationId: deleteTask
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task to delete
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The task was deleted successfully
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/types:
    get:
      tags:
      - Task Types
      - Tasks
      summary: Return a task type associated to the identifier
      description: Allow to get a task type associated to an identifier
      operationId: retrieveTaskTypesPage
      parameters:
      - name: name
        in: query
        description: A name to be equals on the task types to return. You can use
          a Perl compatible regular expressions (PCRE) that has to match the name
          of the task types to return if you write between '/'. For example to get
          the task types with a name with the word 'eat' you must pass as 'goalName'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: description
        in: query
        description: A description to be equals on the task types to return. You can
          use a Perl compatible regular expressions (PCRE) that has to match the description
          of the task types to return if you write between '/'. For example to get
          the task types with a description with the word 'eat' you must pass as 'goalDescription'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: keywords
        in: query
        description: A set of keywords to be defined on the task types to be returned.
          For each keyword is separated by a ',' and each field keyword can be between
          '/' to use a Perl compatible regular expressions (PCRE) instead the exact
          value.
        schema:
          type: array
          items:
            type: string
        example: key1,/.*eat.*/,key3
      - name: order
        in: query
        description: The order in witch the task types has to be returned. For each
          filed it has be separated by a ',' and each field can start with '+' (or
          without it) to order on ascending order, or with the prefix '-' to do on
          descendant order.
        schema:
          type: array
          items:
            type: string
        example: name,-description
      - name: offset
        in: query
        description: The index of the first task type to return
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: The number maximum of task types to return
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: The task types that match the search.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypePage'
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Task Types
      - Tasks
      summary: Create a task type
      description: Create a new task type
      operationId: createTaskType
      requestBody:
        description: The new task type to create
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        required: true
      responses:
        "200":
          description: The created task type
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "400":
          description: Bad task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/types/{taskTypeId}:
    get:
      tags:
      - Task Types
      - Tasks
      summary: Return a task type associated to the identifier
      description: Allow to get a task type associated to an identifier
      operationId: retrieveTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to get
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      responses:
        "200":
          description: The task type associated to the identifier
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "404":
          description: Not found task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
      - Task Types
      - Tasks
      summary: Modify a task type
      description: Change the attributes of a task type
      operationId: updateTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to update
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the task type
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        required: true
      responses:
        "200":
          description: The updated task type
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
        "400":
          description: Bad task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Task Types
      - Tasks
      summary: Delete the task type associated to the identifier
      description: Allow to delete a task type associated to an identifier
      operationId: deleteTaskType
      parameters:
      - name: taskTypeId
        in: path
        description: The identifier of the task type to delete
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The task type was deleted successfully
        "404":
          description: Not found task type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/transactions:
    post:
      tags:
      - Task Transactions
      - Tasks
      summary: Do a task transaction
      description: Called when when to do an action over a task
      operationId: doTaskTransaction
      requestBody:
        description: The task transaction to do
        content:
          application/json:
            schema:
              $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        required: true
      responses:
        "200":
          description: The started task transaction
          content:
            application/json:
              schema:
                $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        "400":
          description: Bad task transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /versions:
    get:
      tags:
      - Other
      summary: Get the version of the API
      description: Return the current API version
      operationId: getVersion
      responses:
        "200":
          description: The API version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
          description: Contain code that identifies the error
          example: error_code
        message:
          type: string
          description: Contain a brief description of the error to be read by a human
          example: Error readable by a human
      description: Inform of an error that happens when interacts with the API
    TaskPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first task returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of tasks that satisfies the search.
          format: int64
          example: 100
        tasks:
          type: array
          description: The set of tasks found
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task
      description: Contains a set of tasks
    TaskTypePage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first task type returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of task types that satisfies the search.
          format: int64
          example: 100
        taskTypes:
          type: array
          description: The set of task types found
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskType
      description: Contains a set of task types
    version:
      type: object
      properties:
        api:
          type: string
          description: Contain the implementation version number of the API
          example: 1.0.0
        software:
          type: string
          description: Contain the implementation version number of the software
          example: 1.0.0
        vendor:
          type: string
          description: Contain information of the organization that has implemented
            the API
          example: UDT-IA, IIIA-CSIC
      description: Provide the version information of the API
