openapi: 3.0.1
info:
  title: WeNet - Interaciton protocol engine API
  description: |-
    The interaction protocol engine component is the one responsible for guaranteeing that interactions between WeNet users follow the norms.
    ## Message
    The interaction between users is modeled as an exchange of messages. When a user sends a message through the API, the message is sent to the norm interpreter of the user. This interpreter needs to first verify that the message does not violate any of the norms, this includes the community norms, the task norms, the sender’s individual norms, as well as the context-dependent norms that are attached to this message. If the message violates any of those norms, an error message is sent back to the user. However, if the message obeys the norms, then the norm interpreter needs to decide what to do next, usually translated into sending messages to other peers. This decision follows from the community, individual and context-dependent norms, and takes the user’s profile (both public and private) into account as needed. If the message is sent to the interpreter of another user. As in the previous case, the norm interpreter of this new user needs to first verify that the message does not violate any of the community norms. This re-checking upon receipt ensures that the sender’s norm engine has not been manipulated to cheat. If the message violates any of the community norms, then it may either be discarded, or if the community norms require sanctioning, then the appropriate sanctions should be executed. However, if the action obeys the community norms, then the norm interpreter needs to decide what to do next, which is usually translated into sending messages to other peers and/or sending messages to its user. This decision takes into consideration the community norms, the context-dependent norms that are attached to the message, the individual private norms of the human whose interpreter has received this message, as well as their local profile (both private and public). This ensures that the interpreter abides by human’s private norms without leaking any of their private norms and profile.

    ## Norm
    The functionality provided allows to publish norms, and manage the user and community norms.
    There are norms on the individual (user level), the task level, and the community level. An individual’s norm might be “Suppress incoming messages at night” (and this will be applied for the user who sets this norm only). A task norm might be “Don’t ask my ex” (so that would be applied for a specific task only). A community norm might be “If you don’t volunteer, you cannot ask for help” and it would be enforced on everyone. Given the above, this means that norms will be attached to users, tasks and communities.
  contact:
    name: Bruno Rosell i Gui (UDT-IA, IIIA-CSIC)
    email: rosell@iiia.csic.es
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.10.0
servers:
- url: https://wenet.u-hopper.com/prod/interaction_protocol_engine
  description: WeNet production server
- url: https://wenet.u-hopper.com/dev/interaction_protocol_engine
  description: WeNet development server server
- url: http://ardid.iiia.csic.es/wenet/interaction-protocol-engine/0.10/
  description: IIIA development server
tags:
- name: Other
  description: Other services provided by the API.
- name: Messages
  description: The functionality provided allows to send messages.
- name: Norms
  description: The functionality provided allows to publish norms, and manage the
    user and community norms.
paths:
  /incentives:
    post:
      tags:
      - Incentives
      summary: Send a incentive to an user that is involved in a protocol.
      description: Publish a incentive to encourage an user to participate on a protocol.
      operationId: sendIncentive
      requestBody:
        description: The incentive to send to the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incentive'
        required: true
      responses:
        "202":
          description: If the accepted to be processed
        "400":
          description: Bad incentive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /messages:
    post:
      tags:
      - Messages
      summary: Send a message in an interaction protocol
      description: Publish a message in an interaction protocol that has to be validated
        by this engine.
      operationId: sendMessage
      requestBody:
        description: The message to publish
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message'
        required: true
      responses:
        "202":
          description: If the message is accepted to be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        "400":
          description: Bad message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /norms:
    get:
      tags:
      - Norms
      summary: Return some published norms
      description: Allow to search for a published norms that match some patterns
      operationId: retrievePublishedNormsPage
      parameters:
      - name: keyword
        in: query
        description: The keyword of the published norms to return or a Perl compatible
          regular expressions (PCRE) that has to match the keyword of the published
          norms to return.
        schema:
          type: array
          items:
            type: string
            example: (?i)key(?-i)word
      - name: name
        in: query
        description: A name to be equals on the published norms to return. You can
          use a Perl compatible regular expressions (PCRE) that has to match the name
          of the norms to return if you write between '/'. For example to get the
          norms with a name with the word 'eat' you must pass as 'name' '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: description
        in: query
        description: A description to be equals on the tasks to return.or You can
          use a Perl compatible regular expressions (PCRE) that has to match the description
          of the tasks to return if you write between '/'. For example to get the
          norms with a description with the word 'eat' you must pass as 'description'
          '/.*eat.*/'
        schema:
          type: string
        example: /.*eat.*/
      - name: keywords
        in: query
        description: A set of keywords to be defined on the norms to be returned.
          For each keyword is separated by a ',' and each field keyword can be between
          '/' to use a Perl compatible regular expressions (PCRE) instead the exact
          value.
        schema:
          type: array
          items:
            type: string
        example: key1,/.*eat.*/,key3
      - name: publisherId
        in: query
        description: An user identifier to be equals on the publisher of the norm
          to return. You can use a Perl compatible regular expressions (PCRE) that
          has to match the publisher identifier of the norms to return if you write
          between '/'. For example to get the norms published by '1' and '2' you must
          pass as 'publisherId' '/^[1|2]$/'.
        schema:
          type: string
        example: 1e346fd440
      - name: publishFrom
        in: query
        description: The difference, measured in seconds, between the minimum publish
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: publishTo
        in: query
        description: The difference, measured in seconds, between the maximum publish
          time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: order
        in: query
        description: The order in witch the norms has to be returned. For each filed
          it has be separated by a ',' and each field can start with '+' (or without
          it) to order on ascending order, or with the prefix '-' to do on descendant
          order.
        schema:
          type: array
          items:
            type: string
        example: name,-description,+publisherId
      - name: offset
        in: query
        description: The index of the first norm to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of norms to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The published norms that match the patterns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedNormsPage'
        "400":
          description: Bad request. For example if a pattern is not right
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Norms
      summary: Publish a norm
      description: Publish a norm to be accessible by the other users on WeNet
      operationId: publishNorm
      requestBody:
        description: The norm to publish
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishedNorm'
        required: true
      responses:
        "201":
          description: The published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedNorm'
        "400":
          description: Bad norm to publish
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /norms/{publishedNormId}:
    get:
      tags:
      - Norms
      summary: Return a published norm associated to the identifier
      description: Allow to get a published norm associated to an identifier
      operationId: retrievePublishedNorm
      parameters:
      - name: publishedNormId
        in: path
        description: The identifier of the published norm to get
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      responses:
        "200":
          description: The published norm associated to the identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedNorm'
        "404":
          description: Not found published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
      - Norms
      summary: Modify all the fields of a published norm
      description: Change all the attributes of a published norm
      operationId: updatePublishedNorm
      parameters:
      - name: publishedNormId
        in: path
        description: The identifier of the published norm to update
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the published norm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishedNorm'
        required: true
      responses:
        "200":
          description: The updated published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedNorm'
        "400":
          description: Bad published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Norms
      summary: Delete the published norm associated to the identifier
      description: Allow to delete a published norm associated to an identifier
      operationId: deletePublishedNorm
      parameters:
      - name: publishedNormId
        in: path
        description: The identifier of the published norm to delete
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The published norm was deleted successfully
        "404":
          description: Not found published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    patch:
      tags:
      - Norms
      summary: Modify partially a published norm
      description: Change some of the attributes of a published norm
      operationId: mergePublishedNorm
      parameters:
      - name: publishedNormId
        in: path
        description: The identifier of the published norm to merge
        required: true
        schema:
          type: string
        example: 15837028-645a-4a55-9aaf-ceb846439eba
      requestBody:
        description: The new values for the published norm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishedNorm'
        required: true
      responses:
        "200":
          description: The merged published norm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedNorm'
        "400":
          description: Bad published norm to merge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "404":
          description: Not found published norm to merge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /versions:
    get:
      tags:
      - Other
      summary: Get the version of the API
      description: Return the current API version
      operationId: getVersion
      responses:
        "200":
          description: The API version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version'
components:
  schemas:
    Badge:
      type: object
      properties:
        BadgeClass:
          type: string
          example: hpqAdI7hQf2maQ13AW1jXA
        ImgUrl:
          type: string
          example: http://3.126.161.118:8000/media/uploads/badges/assertion-OYmfmtDFSIKG-qeZfXz4QQ.png
        Criteria:
          type: string
          example: The user will get this badge for 50 relations in tweeter.
        Message:
          type: string
          example: congratulations! you just earned a new badge for your relations
            on tweeter.
      description: The badge on an incentive.
    Incentive:
      type: object
      properties:
        AppID:
          type: string
          example: "1"
        UserId:
          type: string
          example: "6"
        IncentiveType:
          type: string
          example: Message/Badge (only one)
        Issuer:
          type: string
          example: WeNet issuer
        Message:
          $ref: '#/components/schemas/Message'
        Badge:
          $ref: '#/components/schemas/Badge'
      description: An user incentive.
    Message:
      type: object
      properties:
        content:
          type: string
          example: we are happy to see your participation in the I-log app you are
            doing a great job!
      description: The message on an incentive.
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
          description: Contain code that identifies the error
          example: error_code
        message:
          type: string
          description: Contain a brief description of the error to be read by a human
          example: Error readable by a human
      description: Inform of an error that happens when interacts with the API
    message:
      type: object
      properties:
        senderId:
          type: string
          description: The identifier of the user that send the message
          example: 15837028-645a-4a55-9aaf-ceb846439eba
        appId:
          type: string
          description: The identifier of the application that has used the sender
            to send this message.
          example: E34jhg78tbgh
        communityId:
          type: string
          description: The identifier of the application that has used the sender
            to send this message.
          example: ceb846439eba-645a-9aaf-4a55-15837028
        taskId:
          type: string
          description: The identifier of the application that has used the sender
            to send this message.
          example: b129e5509c9bb79
        content:
          type: object
          description: The content of the message.
          example: Hi!
        norms:
          type: array
          description: The norms to apply over the message
          items:
            $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Norm
        type:
          type: string
          description: The type of message.
          example: TASK_TRANSACTION
          enum:
          - TASK_CREATED
          - TASK_TRANSACTION
          - INCENTIVE
      description: A message that can be interchange in an interaction protocol.
    Norm:
      $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Norm
    PublishedNorm:
      type: object
      properties:
        _creationTs:
          type: integer
          description: The time stamp representing the account creation instant.
          format: int64
          example: 1563871899
        _lastUpdateTs:
          type: integer
          description: The time stamp representing the last update instant.
          format: int64
          example: 1563898764
        id:
          type: string
          description: The identifier of the published norm.
          example: bf274393-1e7b-4d40-a897-88cb96277edd
        name:
          type: string
          description: The name of the published norm.
          example: WeNet
        description:
          type: string
          description: The description of the published norm.
          example: A norm of users that provide or require help
        keywords:
          type: array
          description: The keywords of the published  norm
          example:
          - social interaction
          - ethics
          - diversity
          items:
            type: string
        publisherId:
          type: string
          description: The identifier of the user that has published the norm.
          example: bf274393-1e7b-4d40-a897-88cb96277edd
        norm:
          $ref: https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Norm
      description: A norm that is published to share with all the WeNet users.
    PublishedNormsPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first published norm returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of published norms that satisfies the search.
          format: int64
          example: 100
        norms:
          type: array
          description: The set of published norms found
          items:
            $ref: '#/components/schemas/PublishedNorm'
      description: Contains a set of published norms found
    version:
      type: object
      properties:
        api:
          type: string
          description: Contain the implementation version number of the API
          example: 1.0.0
        software:
          type: string
          description: Contain the implementation version number of the software
          example: 1.0.0
        vendor:
          type: string
          description: Contain information of the organization that has implemented
            the API
          example: UDT-IA, IIIA-CSIC
      description: Provide the version information of the API
