openapi: 3.0.1
info:
  title: WeNet - Interaciton protocol engine API
  description: "The interaction protocol engine component is the one responsible for\
    \ guaranteeing interactions between WeNet users to follow the norms.\nThe interaction\
    \ between users is modelled as an exchange of messages. When a user sends a message\
    \ through the API, the message is sent to the norm interpreter of the user. This\
    \ interpreter needs to first verify that the message does not violate any of the\
    \ norms, this includes the community norms, the task norms, the sender’s individual\
    \ norms, as well as the context-dependent norms that are attached to this message.\
    \ If the message violates any of those norms, an error message is sent back to\
    \ the user. However, if the message obeys the norms, then the norm interpreter\
    \ needs to decide what to do next, usually translated into sending messages to\
    \ other peers. This decision follows from the community, individual and context-dependent\
    \ norms, and takes the user’s profile (both public and private) into account as\
    \ needed. If the message is sent to the interpreter of another user. As in the\
    \ previous case, the norm interpreter of this new user needs to first verify that\
    \ the message does not violate any of the community norms. This re-checking upon\
    \ receipt ensures that the sender’s norm engine has not been manipulated to cheat.\
    \ If the message violates any of the community norms, then it may either be discarded\
    \ or if the community norms require sanctioning, then the appropriate sanctions\
    \ should be executed. However, if the action obeys the community norms, then the\
    \ norm interpreter needs to decide what to do next, which is usually translated\
    \ into sending messages to other peers and/or sending messages to its user. This\
    \ decision takes into consideration the community norms, the context-dependent\
    \ norms that are attached to the message, the individual private norms of the\
    \ human whose interpreter has received this message, as well as their local profile\
    \ (both private and public). This ensures that the interpreter abides by human’\
    s private norms without leaking any of their private norms and profile.\nThere\
    \ are norms on the individual (user level), the task level, and the community\
    \ level. An individual’s norm might be “Suppress incoming messages at night” (and\
    \ this will be applied for the user who sets this norm only). A task norm might\
    \ be “Don’t ask my ex” (so that would be applied for a specific task only). A\
    \ community norm might be “If you don’t volunteer, you cannot ask for help” and\
    \ it would be enforced on everyone. Given the above, this means that norms will\
    \ be attached to users, tasks and communities."
  contact:
    name: "Bruno Rosell i Gui (UDT-IA, IIIA-CSIC)"
    email: rosell@iiia.csic.es
  license:
    name: Apache V2
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 1.1.0
servers:
- url: https://internetofus.u-hopper.com/prod/interaction_protocol_engine
  description: Production instance
- url: https://wenet.u-hopper.com/dev/interaction_protocol_engine
  description: Staging instance
- url: https://ardid.iiia.csic.es/wenet/interaction-protocol-engine
  description: IIIA development server
tags:
- name: Other
  description: Other services provided by the API.
- name: Messages
  description: The functionality provided allows to send messages.
- name: States
  description: The functionality to manage the states necessaries on the norm engine.
- name: Interactions
  description: The functionality to obtain the interactions that has been done.
paths:
  /events/{id}:
    delete:
      tags:
      - Events
      summary: Delete an event to not be fired on an interaction protocol
      description: Remove an event to not be fired.
      operationId: deleteEvent
      parameters:
      - name: id
        in: path
        description: The identifier of the event to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: If the event is deleted
        "404":
          description: Not found event
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /events:
    post:
      tags:
      - Events
      summary: Add an event to be fired in an interaction protocol
      description: The event that has to be fired in the norm engine as a message.
      operationId: sendEvent
      requestBody:
        description: The event to publish
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolEvent'
        required: true
      responses:
        "202":
          description: If the event is accepted to be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolEvent'
        "400":
          description: Bad event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /help/info:
    get:
      tags:
      - Other
      summary: Get the information about the API
      description: Return the relevant information of the API implementation
      operationId: getInfo
      responses:
        "200":
          description: The API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
  /help/openapi.yaml:
    get:
      tags:
      - Other
      summary: Get the Open API description
      description: Return the Open API description of this API
      operationId: getOpenApi
      responses:
        "200":
          description: The API description
  /incentives:
    post:
      tags:
      - Incentives
      summary: Send a incentive to an user that is involved in a protocol.
      description: Publish a incentive to encourage an user to participate on a protocol.
      operationId: sendIncentive
      requestBody:
        description: The incentive to send to the user
        content:
          application/json:
            schema:
              $ref: https://raw.githubusercontent.com/InternetOfUs/components-documentation/MODELS_2.2.0/sources/wenet-models-openapi.yaml#/components/schemas/Incentive
        required: true
      responses:
        "202":
          description: If the accepted to be processed
        "400":
          description: Bad incentive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /interactions:
    get:
      tags:
      - Interactions
      summary: Count the number of interactions between two users.
      operationId: getInteractionsPage
      parameters:
      - name: appId
        in: query
        description: "The identifier of the application where the interaction happens.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the application identifier of the interactions to return if you write\
          \ between '/'. For example to get the interactions done on the applications\
          \ '1' and '2' you must pass as 'appId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: communityId
        in: query
        description: "The identifier of the community where the interaction happens.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the community identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions done on the community '1' and\
          \ '2' you must pass as 'communityId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: taskTypeId
        in: query
        description: "The identifier of the task type where the interaction happens.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the task type identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions done on the task type '1' and\
          \ '2' you must pass as 'taskTypeId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: taskId
        in: query
        description: "The identifier of the task where the interaction happens. You\
          \ can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the task identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions done on the task '1' and '2'\
          \ you must pass as 'taskId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: senderId
        in: query
        description: "The identifier of the user that has started the interaction.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the sender identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions started by the users '1' and\
          \ '2' you must pass as 'senderId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: receiverId
        in: query
        description: "The identifier of the user that has end the interaction. You\
          \ can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the receiver identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions started by the users '1' and\
          \ '2' you must pass as 'receiverId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: hasTransaction
        in: query
        description: This is 'true' if the interaction requires a transaction.
        schema:
          type: boolean
        example: true
      - name: transactionLabel
        in: query
        description: The label of the transaction that has started the interaction.
          You can use a Perl compatible regular expressions (PCRE) that has to match
          the transaction label of the interactions to return if you write between
          '/'. For example to get the transaction with a label that contains the word
          'eat' you must pass as 'transactionLabel' '/.*eat.*/'
        schema:
          type: string
        example: askMoreUsers
      - name: transactionFrom
        in: query
        description: "the minimum time stamp, inclusive, where the interaction has\
          \ to be started, or {@code null} to start at midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: transactionTo
        in: query
        description: "the maximum time stamp, inclusive, where the interaction has\
          \ to be started or {@code null} to be the current time."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: hasMessage
        in: query
        description: This is 'true' if the interaction requires a message.
        schema:
          type: boolean
        example: true
      - name: messageLabel
        in: query
        description: The label of the message that has end the interaction. You can
          use a Perl compatible regular expressions (PCRE) that has to match the message
          label of the interactions to return if you write between '/'. For example
          to get the message with a label that contains the word 'eat' you must pass
          as 'messageLabel' '/.*eat.*/'
        schema:
          type: string
        example: askMoreUsers
      - name: messageFrom
        in: query
        description: "the minimum time stamp, inclusive, where the interaction has\
          \ to be end, or {@code null} to start at midnight, January 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: messageTo
        in: query
        description: "the maximum time stamp, inclusive, where the interaction has\
          \ to be end or {@code null} to be the current time."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: order
        in: query
        description: "The order in witch the interactions has to be returned. For\
          \ each field it has be separated by a ',' and each field can start with\
          \ '+' (or without it) to order on ascending order, or with the prefix '-'\
          \ to do on descendant order."
        style: form
        schema:
          type: string
        example: "transactionTs,-messageLabel"
      - name: offset
        in: query
        description: The index of the first interaction to return.
        schema:
          type: integer
          format: int32
          default: 0
        example: 4
      - name: limit
        in: query
        description: The number maximum of interactions to return
        schema:
          type: integer
          format: int32
          default: 10
        example: 100
      responses:
        "200":
          description: The page with the interactions that match the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionsPage'
        "400":
          description: Bad request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
      - Interactions
      summary: Add a new interaction between users.
      operationId: addInteraction
      requestBody:
        description: The interaction to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interaction'
        required: true
      responses:
        "201":
          description: The stored interaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
        "400":
          description: Bad interaction to add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
      - Interactions
      summary: Delete some interactions.
      operationId: deleteInteractions
      parameters:
      - name: appId
        in: query
        description: "The identifier of the application of the interaction to delete.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the application identifier of the interactions to return if you write\
          \ between '/'. For example to get the interactions done on the applications\
          \ '1' and '2' you must pass as 'appId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: communityId
        in: query
        description: "The identifier of the community of the interaction to delete.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the community identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions done on the community '1' and\
          \ '2' you must pass as 'communityId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: taskTypeId
        in: query
        description: "The identifier of the task type of the interaction to delete.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the task type identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions done on the task type '1' and\
          \ '2' you must pass as 'taskTypeId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: taskId
        in: query
        description: "The identifier of the task of the interaction to delete. You\
          \ can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the task identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions done on the task '1' and '2'\
          \ you must pass as 'taskId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: senderId
        in: query
        description: "The identifier of the user that has started the interaction\
          \ to delete. You can use a Perl compatible regular expressions (PCRE) that\
          \ has to match the sender identifier of the interactions to return if you\
          \ write between '/'. For example to get the interactions started by the\
          \ users '1' and '2' you must pass as 'senderId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: receiverId
        in: query
        description: "The identifier of the user that has end the interaction to delete.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the receiver identifier of the interactions to return if you write between\
          \ '/'. For example to get the interactions started by the users '1' and\
          \ '2' you must pass as 'receiverId' '/[1|2]/'"
        schema:
          type: string
        example: 1
      - name: hasTransaction
        in: query
        description: This is 'true' if the interaction to delete requires a transaction.
        schema:
          type: boolean
        example: true
      - name: transactionLabel
        in: query
        description: The label of the transaction that has started the interaction
          to delete. You can use a Perl compatible regular expressions (PCRE) that
          has to match the transaction label of the interactions to return if you
          write between '/'. For example to get the transaction with a label that
          contains the word 'eat' you must pass as 'transactionLabel' '/.*eat.*/'
        schema:
          type: string
        example: askMoreUsers
      - name: transactionFrom
        in: query
        description: "the minimum time stamp, inclusive, where the interaction to\
          \ delete has to be started, or {@code null} to start at midnight, January\
          \ 1, 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: transactionTo
        in: query
        description: "the maximum time stamp, inclusive, where the interaction to\
          \ delete has to be started or {@code null} to be the current time."
        schema:
          type: integer
          format: int64
        example: 1571664406
      - name: hasMessage
        in: query
        description: This is 'true' if the interaction to delete requires a message.
        schema:
          type: boolean
        example: true
      - name: messageLabel
        in: query
        description: The label of the message that has end the interaction to delete.
          You can use a Perl compatible regular expressions (PCRE) that has to match
          the message label of the interactions to return if you write between '/'.
          For example to get the message with a label that contains the word 'eat'
          you must pass as 'messageLabel' '/.*eat.*/'
        schema:
          type: string
        example: questionToAnswer
      - name: messageFrom
        in: query
        description: "the minimum time stamp, inclusive, where the interaction to\
          \ delete has to be end, or {@code null} to start at midnight, January 1,\
          \ 1970 UTC."
        schema:
          type: integer
          format: int64
        example: 1457166440
      - name: messageTo
        in: query
        description: "the maximum time stamp, inclusive, where the interaction to\
          \ delete has to be end or {@code null} to be the current time."
        schema:
          type: integer
          format: int64
        example: 1571664406
      responses:
        "204":
          description: If the interaction that match the parameters has been deleted
        "404":
          description: Can not delete because no interaction match the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /messages:
    post:
      tags:
      - Messages
      summary: Send a message in an interaction protocol
      description: Publish a message in an interaction protocol that has to be validated
        by this engine.
      operationId: sendMessage
      requestBody:
        description: The message to publish
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMessage'
        required: true
      responses:
        "202":
          description: If the message is accepted to be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMessage'
        "400":
          description: Bad message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /states/communities/{communityId}/users/{userId}:
    get:
      tags:
      - States
      summary: Return the state
      description: Retrieve the state that satisfy the query parameters.
      operationId: retrieveCommunityUserState
      parameters:
      - name: communityId
        in: path
        description: The identifier of the community where is the state
        required: true
        schema:
          type: string
        example: 1
      - name: userId
        in: path
        description: The identifier of the user to the related state
        required: true
        schema:
          type: string
        example: 2
      responses:
        "200":
          description: The state associated to the community user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/State'
    patch:
      tags:
      - States
      summary: Merge the state
      description: Merge the current community user with a new one.
      operationId: mergeCommunityUserState
      parameters:
      - name: communityId
        in: path
        description: The identifier of the community where is the state
        required: true
        schema:
          type: string
        example: 1
      - name: userId
        in: path
        description: The identifier of the user to the related state
        required: true
        schema:
          type: string
        example: 2
      requestBody:
        description: The new community user state
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
        required: true
      responses:
        "200":
          description: The merged community user state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
        "400":
          description: If the state is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /states/tasks/{taskId}/users/{userId}:
    get:
      tags:
      - States
      summary: Return the state
      description: Retrieve the state that satisfy the query parameters.
      operationId: retrieveTaskUserState
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task where is the state
        required: true
        schema:
          type: string
        example: 1
      - name: userId
        in: path
        description: The identifier of the user to the related state
        required: true
        schema:
          type: string
        example: 2
      responses:
        "200":
          description: The state associated to the task user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/State'
    patch:
      tags:
      - States
      summary: Merge the state
      description: Merge the current task user with a new one.
      operationId: mergeTaskUserState
      parameters:
      - name: taskId
        in: path
        description: The identifier of the task where is the state
        required: true
        schema:
          type: string
        example: 1
      - name: userId
        in: path
        description: The identifier of the user to the related state
        required: true
        schema:
          type: string
        example: 2
      requestBody:
        description: The new task user state
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
        required: true
      responses:
        "200":
          description: The merged task user state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
        "400":
          description: If the state is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /states/users/{userId}:
    get:
      tags:
      - States
      summary: Return the state
      description: Retrieve the state that satisfy the query parameters.
      operationId: retrieveUserState
      parameters:
      - name: userId
        in: path
        description: The identifier of the user to the related state
        required: true
        schema:
          type: string
        example: 2
      responses:
        "200":
          description: The state associated to the user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/State'
    patch:
      tags:
      - States
      summary: Merge the state
      description: Merge the current community user with a new one.
      operationId: mergeUserState
      parameters:
      - name: userId
        in: path
        description: The identifier of the user to the related state
        required: true
        schema:
          type: string
        example: 2
      requestBody:
        description: The new community user state
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
        required: true
      responses:
        "200":
          description: The merged user state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
        "400":
          description: If the state is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /states:
    get:
      tags:
      - States
      summary: Return the state
      description: Retrieve the state that satisfy the query parameters.
      operationId: retrieveStates
      parameters:
      - name: communityId
        in: query
        description: "A community identifier to be equals on the state to return.\
          \ You can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the community identifier of the state if you write between '/'. For example\
          \ to get the state for communities '1' and '2' you must pass as 'communityId'\
          \ '/^[1|2]$/'."
        schema:
          type: string
        example: 1
      - name: taskId
        in: query
        description: "An task identifier to be equals on the state to return. You\
          \ can use a Perl compatible regular expressions (PCRE) that has to match\
          \ the task of the state if you write between '/'. For example to get the\
          \ state for tasks '1' and '2' you must pass as 'taskId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1
      - name: userId
        in: query
        description: "a user identifier to be equals on the state to return. You can\
          \ use a Perl compatible regular expressions (PCRE) that has to match the\
          \ user of the state if you write between '/'. For example to get the state\
          \ for users '1' and '2' you must pass as 'userId' '/^[1|2]$/'."
        schema:
          type: string
        example: 1
      responses:
        "200":
          description: The state associated to the query
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatesPage'
  /tasks/transactions:
    post:
      tags:
      - Tasks
      summary: Do a transaction over a task
      description: "Start the process to do a task transaction. Thus, verify that\
        \ it fulfill the norms, change the task state and notify the necessary WeNet\
        \ users."
      operationId: doTransaction
      requestBody:
        description: The norm to publish
        content:
          application/json:
            schema:
              $ref: https://raw.githubusercontent.com/InternetOfUs/components-documentation/MODELS_2.2.0/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        required: true
      responses:
        "202":
          description: The transaction is accepted to be processed
          content:
            application/json:
              schema:
                $ref: https://raw.githubusercontent.com/InternetOfUs/components-documentation/MODELS_2.2.0/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction
        "400":
          description: Cannot process the task transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/created:
    post:
      tags:
      - Tasks
      summary: Initialize a created task
      description: "Start the process to initialize the task execution. Thus, this\
        \ verify the norms that will be used for example to initialize the task state\
        \ or decide witch of the WeNet users will participate on the task."
      operationId: taskCreated
      requestBody:
        description: The norm to publish
        content:
          application/json:
            schema:
              $ref: https://raw.githubusercontent.com/InternetOfUs/components-documentation/MODELS_2.2.0/sources/wenet-models-openapi.yaml#/components/schemas/Task
        required: true
      responses:
        "202":
          description: The creation task has accepted to be processed
          content:
            application/json:
              schema:
                $ref: https://raw.githubusercontent.com/InternetOfUs/components-documentation/MODELS_2.2.0/sources/wenet-models-openapi.yaml#/components/schemas/Task
        "400":
          description: Cannot process the created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
          description: Contain code that identifies the error
          example: error_code
        message:
          type: string
          description: Contain a brief description of the error to be read by a human
          example: Error readable by a human
      description: Inform of an error that happens when interacts with the API
    ProtocolEvent:
      type: object
      properties:
        appId:
          type: string
          description: The identifier of the application associated to the protocol.
          nullable: true
          example: E34jhg78tbgh
        communityId:
          type: string
          description: The identifier of the community associated to the protocol.
          nullable: true
          example: ceb846439eba-645a-9aaf-4a55-15837028
        taskId:
          type: string
          description: The identifier of the task associated to the protocol.
          nullable: true
          example: b129e5509c9bb79
        transactionId:
          type: string
          description: The identifier of the transaction associated to the protocol.
          nullable: true
          example: b129e5509c9bb79
        particle:
          type: string
          description: The particle that define the motive of the action.
          example: inform
        content:
          type: object
          description: The content of the action.
          nullable: true
          example:
            entered: true
        id:
          type: integer
          description: The identifier of the event.
          format: int64
          readOnly: true
        delay:
          type: integer
          description: The identifier of the event.
          format: int64
          example: 1
        userId:
          type: string
          description: The agent that send the message
      description: An event that will be fired on a protocol.
    Info:
      type: object
      properties:
        name:
          type: string
          description: Contain the name of the API
          example: wenet/interaction-protocol-engine
        apiVersion:
          type: string
          description: Contain the implementation version number of the API
          example: 1.0.0
        softwareVersion:
          type: string
          description: Contain the implementation version number of the software
          example: 1.0.0
        vendor:
          type: string
          description: Contain information of the organization that has implemented
            the API
          example: "UDT-IA, IIIA-CSIC"
        license:
          type: string
          description: Contain information of the license of the API
          example: Apache v2
      description: Provide the version information of the API
    Interaction:
      type: object
      properties:
        appId:
          type: string
          description: The identifier of the application type where the interaction
            is done.
          nullable: true
          example: b129e5509c9bb79
        communityId:
          type: string
          description: The identifier of the community where the interaction is done.
          nullable: true
          example: b129e5509c9bb79
        taskTypeId:
          type: string
          description: The identifier of the task type where the interaction is done.
          nullable: true
          example: b129e5509c9bb79
        taskId:
          type: string
          description: The identifier of the task where the interaction is done.
          nullable: true
          example: b129e5509c9bb79
        senderId:
          type: string
          description: The identifier of the user that starts this interaction.
          nullable: true
          example: b129e5509c9bb79
        receiverId:
          type: string
          description: The identifier of the user that ends this interaction.
          nullable: true
          example: b129e5509c9bb79
        transactionLabel:
          type: string
          description: The label of the transaction that has started the interaction.
          nullable: true
          example: askMoreUsers
        transactionAttributes:
          type: object
          description: "the attributes of the transaction, as key-value pairs."
          nullable: true
        transactionTs:
          type: integer
          description: The UTC epoch timestamp representing the time when the transaction
            has been done.
          format: int64
          nullable: true
          example: 1563930000
        messageLabel:
          type: string
          description: The label of the message that has started the interaction.
          nullable: true
          example: askMoreUsers
        messageAttributes:
          type: object
          description: "the attributes of the message, as key-value pairs."
          nullable: true
        messageTs:
          type: integer
          description: The UTC epoch timestamp representing the time when the message
            has been sent.
          format: int64
          nullable: true
          example: 1563930000
      description: Provide information of an interaction between two users
    InteractionsPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first interaction returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of interactions that satisfies the search.
          format: int64
          example: 100
        interactions:
          type: array
          description: The set of interactions found
          items:
            $ref: '#/components/schemas/Interaction'
      description: Contains a set of interactions between users
    ProtocolAddress:
      type: object
      properties:
        component:
          type: string
          description: The component that interact on the protocol.
          enum:
          - USER_APP
          - INTERACTION_PROTOCOL_ENGINE
          - SOCIAL_CONTEXT_BUILDER
          - INCENTIVE_SERVER
          - TASK_MANAGER
          - PROFILE_MANAGER
        userId:
          type: string
          description: The user associated the component that interact.
      description: The component that send/receive a message.
    ProtocolMessage:
      type: object
      properties:
        appId:
          type: string
          description: The identifier of the application associated to the protocol.
          nullable: true
          example: E34jhg78tbgh
        communityId:
          type: string
          description: The identifier of the community associated to the protocol.
          nullable: true
          example: ceb846439eba-645a-9aaf-4a55-15837028
        taskId:
          type: string
          description: The identifier of the task associated to the protocol.
          nullable: true
          example: b129e5509c9bb79
        transactionId:
          type: string
          description: The identifier of the transaction associated to the protocol.
          nullable: true
          example: b129e5509c9bb79
        particle:
          type: string
          description: The particle that define the motive of the action.
          example: inform
        content:
          type: object
          description: The content of the action.
          nullable: true
          example:
            entered: true
        sender:
          $ref: '#/components/schemas/ProtocolAddress'
        receiver:
          $ref: '#/components/schemas/ProtocolAddress'
      description: A message that can be interchange in an interaction protocol.
    State:
      type: object
      properties:
        _creationTs:
          type: integer
          description: The time stamp representing the account creation instant.
          format: int64
          readOnly: true
          example: 1563871899
        _lastUpdateTs:
          type: integer
          description: The time stamp representing the last update instant.
          format: int64
          readOnly: true
          example: 1563898764
        communityId:
          type: string
          description: The identifier of the community associated to the state.
          nullable: true
          example: "1"
        taskId:
          type: string
          description: The identifier of the task associated to the state.
          nullable: true
          example: "1"
        userId:
          type: string
          description: The identifier of the user associated to the state.
          nullable: true
          example: "1"
        attributes:
          type: object
          description: The attributes that define the state.
          nullable: true
      description: Model that describe a state.
    StatesPage:
      type: object
      properties:
        offset:
          type: integer
          description: The index of the first state returned.
          format: int32
          example: 0
        total:
          type: integer
          description: The number total of states that satisfies the search.
          format: int64
          example: 100
        states:
          type: array
          description: The set of states found
          items:
            $ref: '#/components/schemas/State'
      description: Contains a set of states
