openapi: 3.0.1
info:
  title: WeNet - Service REST APIs
  description: This document describes the API exposed by the Service component of the WeNet platform.

    In particular, the models entities handled by the Service REST API are

    - WeNet application

    - WeNet user

    - Incoming message - these messages that are written by users and should be handled by the platform in order to create a meaningful response

    - Outgoing message - these messages that are created as responses to the incoming messages written by the users

    - Task


    Two different types of authentication are available and must be used accordingly.

    - WeNet application should authenticate their requests by specifying in the headers of their requests the values *appId* and *appToken*;

    - WeNet component should authenticate their requests by specifying the unique *apikey* that has been assigned to them.

  contact:
    email: carlo.caprini@u-hopper.com
  version: 1.0.0

servers:
  - url: https://wenet.u-hopper.com/dev/api/service
    description: Testing instance

paths:

  # /app:
  #   post:
  #     summary: Create a new wenet app
  #     tags:
  #       - App
  #     description: This endpoint allows to create a new wenet app.
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/App'
  #     responses:
  #       200:
  #         description: App created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/App'
  
  /token:
    get:
      summary: Get the details of a given Oauth2 token
      tags: 
        - Token Details
      security: 
        - Oauth2: []
      responses:
        200:
          description: The detail of the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetails'
                
      

  /app/{appId}:
    get:
      summary: Get the details of an app
      tags:
        - App
      description: This endpoint allows to get the details of an existing wenet app.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: appId
          schema:
            type: string
          required: true
          description: The Id of the wenet app
      responses:
        200:
          description: The details of the requested app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'

  /app/{appId}/users:
    get:
      summary: Get the list of all users associated to an app
      tags:
        - App
      description: This endpoint allows to get the list of user ids of users who enabled the specified wenet app.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: appId
          schema:
            type: string
          required: true
          description: The Id of the wenet app
      responses:
        200:
          description: The details of the requested app
          content:
            application/json:
              schema:
                type: array
                description: The ids of the users who enabled the app
                items:
                  type: string
                  example: 123

    # put:
    #   summary: Update the details of an app
    #   tags:
    #     - App
    #   description: This endpoint allows to create a new wenet app.
    #   parameters:
    #     - in: path
    #       name: appId
    #       schema:
    #         type: string
    #       required: true
    #       description: The Id of the wenet app
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/App'
    #   responses:
    #     200:
    #       description: The details of the requested app
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/App'

  /user/authenticate:
    post:
      summary: Authenticate WeNet user
      tags:
        - WeNet user
      description: This endpoint allows to authenticate a WeNet user by taking advantage of one of the available authentication strategies. The response includes the Id of the associated wenet user.
      security:
        - AppIdAuth: []
          AppTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramAuthenticationAccount'
      responses:
        200:
          description: Correct authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeNetUser'
        401:
          description: No WeNet user associated to authentication credentials provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/accounts:
    get:
      summary: Get the accounts associated to a WeNet user
      tags:
        - WeNet user
      description: This endpoint allows to authenticate a WeNet user by taking advantage of one of the available authentication strategies. The response includes the Id of the associated wenet user.
      security:
        - AppIdAuth: []
          AppTokenAuth: []
      parameters:
        - in: query
          name: appId
          schema:
            type: string
          required: true
          description: The Id of the wenet app
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: The Id of the wenet user
      responses:
        200:
          description: The (active) accounts associated to the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeNetUserWithAccounts'
        401:
          description: No WeNet user associated to authentication credentials provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/account/metadata:
    post:
      summary: Update user account metadata
      tags:
        - WeNet user
      description: This endpoint allows to override the existing account metadata with the new provided ones.
      security:
        - AppIdAuth: []
          AppTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TelegramAuthenticationAccount'
              properties:
                userId:
                  type: string
                  example: 15837028-645a-4a55-9aaf-ceb846439eba
                metadata:
                  readOnly: false
      responses:
        200:
          description: Correct authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        401:
          description: No WeNet user associated to authentication credentials provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  # /user:
  #   summary: Create new WeNet user with the specified authentication credentials
  #   post:
  #     summary: Create new WeNet user
  #     tags:
  #       - WeNet user
  #     description: This entpoint allows to create a new WeNet user associated to the specified authentication strategy. The response includes the Id of the newly created wenet user.
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/FacebookAuthentication'
  #     responses:
  #       201:
  #         description: WeNet user correctly created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/WeNetUser'
  
  
  /user/profile:
    get:
      summary: Get the profile of the specified wenet user
      tags:
        - WeNet user profile
      description: This entpoint allows to create a new WeNet user associated to the specified authentication strategy.
      security:
        - Oauth2: []
      responses:
        200:
          description: WeNetUser profile
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/WeNetUserProfile'


  /user/profile/{wenetUserId}:
    post:
      summary: Create an empty user profile
      tags:
        - WeNet user profile
      description: This entpoint allows to initialize an empty WeNet user profile. It is expected to be used upon the creation of a new user.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: wenetUserId
          schema:
            type: integer
          required: true
          description: The Id of the wenet user
      responses:
        200:
          description: WeNet user correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: The profile for the user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    get:
      summary: Get the profile of the specified wenet user
      tags:
        - WeNet user profile
      description: This entpoint allows to create a new WeNet user associated to the specified authentication strategy.
      security:
        - AppIdAuth: []
          AppTokenAuth: []
        - ApikeyAuth: []
      parameters:
        - in: path
          name: wenetUserId
          schema:
            type: integer
          required: true
          description: The Id of the wenet user
      responses:
        200:
          description: WeNet user correctly created
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/WeNetUserProfile'
        404:
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      summary: Update the profile of a wenet user
      tags:
        - WeNet user profile
      description: This entpoint allows to update the _core_ profile of a wenet user. This is possible by providing the complete user profile that will override the exising one.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: wenetUserId
          schema:
            type: integer
          required: true
          description: The Id of the wenet user
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/CoreWeNetUserProfile'
      responses:
        200:
          description: WeNet user correctly created
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/WeNetUserProfile'
        404:
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /messages:
    post:
      summary: Submit a list of new incoming messages
      tags:
        - Message
      description: This entpoint allows to submit a list of new incoming messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestMessage'
      responses:
        201:
          description: Messages correctly submitted

  /messages/subscription:
    post:
      summary: Create a new message response subscription
      tags:
        - Message subscrption
      description: This entpoint allows to createa new message response subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSubscription'
      responses:
        201:
          description: Message subscription correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /messages/subscription/{subscriptionId}:
    put:
      summary: Update existing message response subscription
      tags:
        - Message subscrption
      description: This entpoint allows to edit an existing message response subscription
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: string
          required: true
          description: The Id of the subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSubscription'
      responses:
        201:
          description: Message subscription correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    delete:
      summary: Delete existing message response subscription
      tags:
        - Message subscrption
      description: This entpoint allows to delete an existing message response subscription
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: string
          required: true
          description: The Id of the subscription
      responses:
        201:
          description: Message subscription correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /task:
    post:
      summary: Create new task
      tags:
        - Task
      description: This entpoint allows to create a new task
      security:
        - AppIdAuth: []
          AppTokenAuth: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
          description: The Id of the task
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'
      responses:
        201:
          description: Task correctly created


  /task/{taskId}:
    get:
      summary: Get the details of an existing task
      tags:
        - Task
      description: This entpoint allows to get the details of an existing task
      security:
        - AppIdAuth: []
          AppTokenAuth: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
          description: The Id of the task
      responses:
        200:
          description: The details of the requested task
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'
        404:
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /task/transaction:
    post:
      summary: Create a new task transaction
      tags:
        - Task
      security:
        - AppIdAuth: []
          AppTokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction'
      responses:
        200:
          description: Transaction correctly submitted
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/EmptyResponse'
               
  /tasks:
    get:
      tags:
      - Task
      summary: Return a page of task that match the query parameters
      description: Allow to get a page of task with the specified query parameters
      operationId: retrieveTasksPage
      parameters:
      - name: appId
        in: query
        description: An application identifier or or a Perl compatible regular expressions
          (PCRE) that has to match the application identifier of the tasks to return.
        schema:
          type: string
          example: "1"
      - name: requesterId
        in: query
        description: An user identifier or or a Perl compatible regular expressions
          (PCRE) that has to match the requester identifier of the tasks to return.
        schema:
          type: string
          example: 1e346fd440
      - name: taskTypeId
        in: query
        description: A task type identifier or or a Perl compatible regular expressions
          (PCRE) that has to match the task type identifier of the tasks to return.
        schema:
          type: string
          example: 1e346fd440
      - name: goalName
        in: query
        description: A goal name or a Perl compatible regular expressions (PCRE) that
          has to match the goal name of the tasks to return.
        schema:
          type: string
          example: .*together.*
      - name: goalDescription
        in: query
        description: A goal description or a Perl compatible regular expressions (PCRE)
          that has to match the goal name of the tasks to return.
        schema:
          type: string
          example: .*dinner.*
      - name: startFrom
        in: query
        description: The difference, measured in seconds, between the minimum start
          time stamp of the task and midnight, January 1, 1970 UTC
        schema:
          type: integer
          format: int64
          example: 1457166440
          default: 0
      - name: startTo
        in: query
        description: The difference, measured in seconds, between the maximum start
          time stamp of the task and midnight, January 1, 1970 UTC
        schema:
          type: integer
          format: int64
          example: 1571664406
          default: 92233720368547757
      - name: endFrom
        in: query
        description: The difference, measured in seconds, between the minimum end
          time stamp of the task and midnight, January 1, 1970 UTC
        schema:
          type: integer
          format: int64
          example: 1457166440
          default: 0
      - name: endTo
        in: query
        description: The difference, measured in seconds, between the maximum end
          time stamp of the task and midnight, January 1, 1970 UTC
        schema:
          type: integer
          format: int64
          example: 1571664406
          default: 92233720368547757
      - name: deadlineFrom
        in: query
        description: The difference, measured in seconds, between the minimum deadline
          time stamp of the task and midnight, January 1, 1970 UTC
        schema:
          type: integer
          format: int64
          example: 1457166440
          default: 0
      - name: deadlineTo
        in: query
        description: The difference, measured in seconds, between the maximum deadline
          time stamp of the task and midnight, January 1, 1970 UTC
        schema:
          type: integer
          format: int64
          example: 1571664406
          default: 92233720368547757
      - name: offset
        in: query
        description: The index of the first task type to return.
        schema:
          type: integer
          format: int64
          example: 5
          default: 0
      - name: limit
        in: query
        description: The number maximum of task types to return.
        schema:
          type: integer
          format: int64
          example: 5
          default: 10
      responses:
        "200":
          description: The task associated to the identifier
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-task_manager-openapi.yaml#/components/schemas/TaskPage'

    # put:
    #   summary: Update task
    #   tags:
    #     - Task
    #   description: This entpoint allows to create a new task
    #   parameters:
    #     - in: path
    #       name: taskId
    #       schema:
    #         type: integer
    #       required: true
    #       description: The Id of the task
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'
    #   responses:
    #     201:
    #       description: Task correctly created

components:

  securitySchemes:

    AppIdAuth:
      type: apiKey
      in: header
      name: appId

    AppTokenAuth:
      type: apiKey
      in: header
      name: appToken

    ApikeyAuth:
      type: apiKey
      in: header
      name: apikey
      
    Oauth2:
      type: http
      scheme: bearer
      bearerFormat: oauth2  


  schemas:

    CreateUpdateTsDetails:
      type: object
      properties:
        creationTs:
          type: integer
          readOnly: true
          description: The UTC epoch timestamp representing the account creation instant
          example: 1563871899
        lastupdateTs:
          type: integer
          readOnly: true
          description: The UTC epoch timestamp representing the last update instant
          example: 1563898764

    # App

    AppAssociationPlatform:
      type: object
      properties:
        type:
          type: string
          enum:
            - telegram
            # - wenet

    # WeNetPlatform:
    #   allOf:
    #     - $ref: '#/components/schemas/AppAssociationPlatform'
    #   properties:
    #     type:
    #       description: The type of platform
    #       example: wenet

    TelegramPlatform:
      allOf:
        - $ref: '#/components/schemas/AppAssociationPlatform'
      properties:
        type:
          type: string
          example: telegram
        botUsername:
          type: string
          description: The username of the Telegram bot
          example: incredible_new_bot

    App:
      description: The app of a wenet use case scenario
      allOf:
        - $ref: '#/components/schemas/CreateUpdateTsDetails'
      properties:
        appId:
          type: string
          description: The Id of the wenet app
          example: 3e557acc-e846-4736-8218-3f64d8e68d8c
          readOnly: true
        appToken:
          type: string
          description: The Id of the wenet app
          example: aisfuh9s8fnkdfhg9d8fgkdjfgnhkduyfgidjkfgkdh
          readOnly: true
        allowedPlatforms:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/TelegramPlatform'
              # - $ref: '#/components/schemas/WeNetPlatform'
        messageCallbackUrl:
          type: string
          nullable: true
          description: The endpoint responsible for receiving the messages generated by the wenet platform for the users
          example: https://app.endpoint.com/messages
        metadata:
          type: object
          description: App metadata (such as its name and description)

    # User and authentication

    AuthenticationAccount:
      type: object
      properties:
        type:
          type: string
          description: The type of authentication
          enum:
            - telegram
        appId:
          type: string
          description: The application for which the authentication should be performed
          example: 3e557acc-e846-4736-8218-3f64d8e68d8c
        metadata:
          type: object
          readOnly: true
          description: Open metadata dictionary

    TelegramAuthenticationAccount:
      allOf:
        - $ref: '#/components/schemas/AuthenticationAccount'
      properties:
        type:
          type: string
          enum:
            - telegram
          example: telegram
        telegramId:
          type: number
          example: 785433782
          description: The telegram id of the user

    WeNetUser:
      type: object
      properties:
        userId:
          type: string
          description: The identifier of the WeNet user
          example: 15837028-645a-4a55-9aaf-ceb846439eba

    WeNetUserWithAccounts:
      allOf:
        - $ref: '#/components/schemas/WeNetUser'
      properties:
        accounts:
          type: array
          readOnly: true
          items:
            allOf:
              - $ref: '#/components/schemas/TelegramAuthenticationAccount'

    # ACL

    # ACL:
    #   type: object
    #   properties:
    #     id:
    #       type: string
    #       description: The identifier of the ACL
    #       example: 08dfogkjdnfg

    # PublicACL:
    #   description: Public access to all wenet apps
    #   allOf:
    #     - $ref: '#/components/schemas/ACL'

    # PrivateACL:
    #   description: Private access only to the app that created the data piece in the first place
    #   allOf:
    #     - $ref: '#/components/schemas/ACL'
    #   properties:
    #     appId:
    #       type: string
    #       description: The Id of the wenet app having access to the data
    #       example: 3e557acc-e846-4736-8218-3f64d8e68d8c

    # CustomACL:
    #   description: Private access only to the app that created the data piece in the first place
    #   allOf:
    #     - $ref: '#/components/schemas/ACL'
    #   properties:
    #     rules:
    #       type: array
    #       items:
    #         type: object
    #         properties:
    #           appId:
    #             type: string
    #             description: The identifier of the wenet app the rule is associated to
    #             example: 6712a3ed-821e-4e93-95f1-3dd39dde1001
    #           access:
    #             type: string
    #             description: The identifier of the wenet app having access to the data
    #             example: 8b9c98b5-7510-4d8c-bf04-219490d0dac7
    #             enum:
    #               - write
    #               - read

    # Messages

    TextualMessage:
      type: object
      properties:
        type:
          type: string
          enum: ["textual_message"]
        value:
          type: string
          example: "I need someone to pick up my son at school"

    ActionRequest:
      type: object
      properties:
        type:
          type: string
          enum: ["action_request"]
        payload:
          type: string
          example: volunteer
        value:
          type: string
          example: "I can do it!"

    Entity:
      type: object
      properties:
        name:
          type: string
          example: "location"
        value:
          type: string
          example: "school"
        confidence:
          type: number
          format: float
          example: 0.94
          nullable: true

    Message:
      type: object
      properties:
        messageId:
          type: string
          example: 2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8
        channel:
          type: string
          enum:
            - facebook
          example: facebook
        userId:
          type: string
          example: USR-JDKHEIU2-31NJDTE94
        appId:
          type: string
          readOnly: true
          example: 3e557acc-e846-4736-8218-3f64d8e68d8c
        type:
          type: string
          enum:
            - request
            - response
          example:  request
      required:
        - messageId
        - channel
        - userId
        - appId
        - type

    RequestMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
      properties:
        timestamp:
          type: string
          format: datetime
          example: "2019-04-04:23.11.58"
        content:
          oneOf:
            - $ref: '#/components/schemas/TextualMessage'
            - $ref: '#/components/schemas/ActionRequest'
        domain:
          type: string
          example: "help"
        intent:
          type: object
          properties:
            name:
              type: string
              example: "help"
            confidence:
              type: number
              format: float
              example: 0.87,
              nullable: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        language:
          type: string
          example: it
        metadata:
          type: object
        type:
          type: string
          enum:
            - request
          example: request
      required:
        - timestamp
        - content

    ResponseMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
      properties:
        responseTo:
          type: string
          example: 1FKNSM-GEKRO2-DANK2-FJ33-DASDJOW
        timestamp:
          type: string
          format: datetime
          example: 2019-04-04:23.11.58
        content:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/TextualMessage'
        metadata:
          type: object
        type:
          type: string
          enum:
            - response
          example: response
      required:
        - responseTo
        - content

    MessageSubscription:
      type: object
      description: The MessageSubscription collects all the information relevant for allowing the platform to provide the message that are created as responses to incoming ones written by the users.
      properties:
        subscriptionId:
          type: string
          readOnly: true
          description: The identifier of the subscription
          example: osddo9fgijdjgn
        appId:
          type: string
          readOnly: true
          description: The app the subscription is associated to
          example: 3e557acc-e846-4736-8218-3f64d8e68d8c
        webhook:
          type: string
          format: url
          description: The url of the webhook that is going to receive the message responsens. The specified endpoint must be configured in order to be able to receive a list of `ResponseMessage`.
          example: "https://www.app1.wenet.com/webhook"
          
    TokenDetails:
      type: object
      properties:
        profileId:
          type: string
          readOnly: true
          description: the id of the profile
        appId:
          type: string
          readOnly: true
          description: The id of the app that has requested the token
        scopes:
          type: array
          description: The list of scopes
          items:
            type: string

    EmptyResponse:
      type: object
