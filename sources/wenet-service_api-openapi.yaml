openapi: 3.0.1
info:
  title: WeNet - Service REST APIs
  description: This document describes the API exposed by the Service component of the WeNet platform.

    In particular, the models entities handled by the Service REST API are

    - WeNet application

    - WeNet user

    - Incoming message - these messages that are written by users and should be handled by the platform in order to create a meaningful response

    - Outgoing message - these messages that are created as responses to the incoming messages written by the users

    - Task


    Two different types of authentication are available and must be used accordingly.

    - WeNet application should authenticate their requests by specifying in the headers of their requests the values *appId* and *appToken*;

    - WeNet component should authenticate their requests by specifying the unique *apikey* that has been assigned to them.

  contact:
    email: carlo.caprini@u-hopper.com
  version: 3.0.0

servers:
  - url: https://wenet.u-hopper.com/dev/service
    description: Staging instance (ApikeyAuth)
  - url: https://wenet.u-hopper.com/dev/api/service
    description: Staging instance (Oauth2)
  - url: https://internetofus.u-hopper.com/prod/service
    description: Production instance (ApikeyAuth)
  - url: https://internetofus.u-hopper.com/prod/api/service
    description: Production instance (Oauth2)

paths:

  /token:
    get:
      summary: Get the details of a given Oauth2 token
      tags:
        - Token Details
      security:
        - Oauth2: []
      responses:
        '200':
          description: The detail of the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetails'

  /app/{appId}:
    get:
      summary: Get the details of an app
      tags:
        - App
      description: This endpoint allows to get the details of an existing wenet app.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: appId
          schema:
            type: string
          required: true
          description: The Id of the wenet app
      responses:
        '200':
          description: The details of the requested app
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'

  /app/{appId}/users:
    get:
      summary: Get the list of all users associated to an app
      tags:
        - App
      description: This endpoint allows to get the list of user ids of users who enabled the specified wenet app.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: appId
          schema:
            type: string
          required: true
          description: The Id of the wenet app
      responses:
        '200':
          description: The details of the requested app
          content:
            application/json:
              schema:
                type: array
                description: The ids of the users who enabled the app
                items:
                  type: string
                  example: 123

  /user/profile/{wenetUserId}:
    get:
      summary: Get the profile of the specified wenet user
      tags:
        - WeNet user profile
      description: This entpoint allows to get the profile of a  WeNet user.
        It requires a valid user OAuth2 token. It allows to access

        * all the profile entries allowed of the user the token is associated to

        * only the public profile (no matter the allowed scope) of a user who is not the one the token was granted for but who is using the same application
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - in: path
          name: wenetUserId
          schema:
            type: integer
          required: true
          description: The Id of the wenet user
          example: 15
      responses:
        '200':
          description: WeNet user correctly retrieved
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/WeNetUserProfile'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    post:
      summary: Create an empty user profile
      tags:
        - WeNet user profile
      description: This entpoint allows to initialize an empty WeNet user profile. It is expected to be used upon the creation of a new user in the WeNet HUB.
      security:
        - ApikeyAuth: []
      parameters:
        - in: path
          name: wenetUserId
          schema:
            type: integer
          required: true
          description: The Id of the wenet user
          example: 15
      responses:
        '200':
          description: WeNet user correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '404':
          description: The profile for the user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      summary: Update the profile of a wenet user
      tags:
        - WeNet user profile
      description: This entpoint allows to update the _core_ profile of a wenet user. This is possible by providing the complete user profile that will override the exising one.
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - in: path
          name: wenetUserId
          schema:
            type: integer
          required: true
          description: The Id of the wenet user
          example: 15
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/CoreWeNetUserProfile'
      responses:
        '200':
          description: WeNet user correctly updated
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/WeNetUserProfile'
        '404':
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/competences:
    get:
      tags:
        - WeNet user profile
      summary: Return the competences of a profile
      description: Allow to get all the competences defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      responses:
        "200":
          description: The competences defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Competence'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update competences of a profile
      description: Update all the competences of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new competences
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Competence'
        required: true
      responses:
        "200":
          description: The updated competences of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Competence'
        "400":
          description: Bad competences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/materials:
    get:
      tags:
        - WeNet user profile
      summary: Return the materials of a profile
      description: Allow to get all the materials defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
      responses:
        "200":
          description: The materials defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Material'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update materials of a profile
      description: Update all the materials of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new materials
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Material'
        required: true
      responses:
        "200":
          description: The updated materials of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Material'
        "400":
          description: Bad materials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/meanings:
    get:
      tags:
        - WeNet user profile
      summary: Return the meanings of a profile
      description: Allow to get all the meanings defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
      responses:
        "200":
          description: The meanings defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Meaning'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update meanings of a profile
      description: Update all the meanings of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new meanings
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Meaning'
        required: true
      responses:
        "200":
          description: The updated meanings of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Meaning'
        "400":
          description: Bad meanings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/norms:
    get:
      tags:
        - WeNet user profile
      summary: Return the norms of a profile
      description: Allow to get all the norms defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
      responses:
        "200":
          description: The norms defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update norms of a profile
      description: Update all the norms of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new norms
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm'
        required: true
      responses:
        "200":
          description: The updated norms of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/ProtocolNorm'
        "400":
          description: Bad norms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/personalBehaviors:
    get:
      tags:
        - WeNet user profile
      summary: Return the personal behaviors of a profile
      description: Allow to get all the personal behaviors defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
      responses:
        "200":
          description: The personal behaviors defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Routine'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update personal behaviors of a profile
      description: Update all the personal behaviors of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new personal behaviors
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Routine'
        required: true
      responses:
        "200":
          description: The updated personal behaviors of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Routine'
        "400":
          description: Bad personal behaviors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/plannedActivities:
    get:
      tags:
        - WeNet user profile
      summary: Return the planned activities of a profile
      description: Allow to get all the planned activities defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
      responses:
        "200":
          description: The planned activities defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/PlannedActivity'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update planned activities of a profile
      description: Update all the planned activities of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new planned activities
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/PlannedActivity'
        required: true
      responses:
        "200":
          description: The updated planned activities of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/PlannedActivity'
        "400":
          description: Bad planned activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/relationships:
    get:
      tags:
        - WeNet user profile
      summary: Return the relationships of a profile
      description: Allow to get all the relationships defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
        
      - name: targetId
        in: query
        description: A user identifier to be equals on the relationships target to return. You can use a Perl compatible regular expressions (PCRE) that has to match the user identifier of the relationships target if you write between '/'. For example to get the relationships with the target users '1' and '2' you must pass as 'target' '/^[1|2]$/'.
        schema: 
          type: string
        required: false
      - name: type
        in: query
        description: The type for the relationships to return. You can use a Perl compatible regular expressions (PCRE) that has to match the type of the relationships if you write between '/'. For example to get the relationships with the types 'friend' and 'colleague' you must pass as 'type' '/^[friend|colleague]$/'.
        schema:
          type: string
        required: false
      - name: weightFrom
        in: query
        description: The minimal weight, inclusive, of the relationships to return.
        schema: 
          type: number
          format: double
        required: false
      - name: weightTo
        in: query
        description: The maximal weight, inclusive, of the relationships to return.
        schema: 
          type: number
          format: double
        required: false
      - name: order
        in: query
        description: "The order in witch the relationships has to be returned. For each field it has be separated by a ',' and each field can start with '+' (or without it) to order on ascending order, or with the prefix '-' to do on descendant order. Example : sourceId,-weight,+type"
        schema: 
          type: string
        required: false

      - name: offset
        in: query
        description: The index of the first social network relationship to return.
        schema:
          type: integer
        required: false
      - name: limit
        in: query
        description: The number maximum of social network relationships to return
        schema:
          type: integer
        required: false
      responses:
        "200":
          description: The relationships defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://raw.githubusercontent.com/InternetOfUs/components-documentation/master/sources/wenet-profile_manager-openapi.yaml#/components/schemas/SocialNetworkRelationshipsPage'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update relationships of a profile
      description: Update all the relationships of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new relationships
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/SocialNetworkRelationship'
        required: true
      responses:
        "200":
          description: The updated relationships of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/SocialNetworkRelationship'
        "400":
          description: Bad relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /user/profile/{wenetUserId}/relevantLocations:
    get:
      tags:
        - WeNet user profile
      summary: Return the relevant locations of a profile
      description: Allow to get all the relevant locations defined into a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
      - name: wenetUserId
        in: path
        description: The Id of the wenet user
        required: true
        schema:
          type: integer
        example: 15
      responses:
        "200":
          description: The relevant locations defined into the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/RelevantLocation'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      tags:
        - WeNet user profile
      summary: Update relevant locations of a profile
      description: Update all the relevant locations of a profile
      security:
        - Oauth2: []
        - ApikeyAuth: []
      parameters:
        - name: wenetUserId
          in: path
          description: The Id of the wenet user
          required: true
          schema:
            type: integer
          example: 15
      requestBody:
        description: The new relevant locations
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/RelevantLocation'
        required: true
      responses:
        "200":
          description: The updated relevant locations of the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/RelevantLocation'
        "400":
          description: Bad relevant locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "404":
          description: No such wenet user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

  /task:
    post:
      summary: Create new task
      tags:
        - Task
      description: This entpoint allows to create a new task
      security:
        - ApikeyAuth: []
        - Oauth2: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'
      responses:
        '201':
          description: Task correctly created
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'

  /task/{taskId}:
    get:
      summary: Get the details of an existing task
      tags:
        - Task
      description: This entpoint allows to get the details of an existing task
      security:
        - ApikeyAuth: []
        - Oauth2: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: The Id of the task
      responses:
        '200':
          description: The details of the requested task
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'
        '404':
          description: No such task exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'

    put:
      summary: Update a task
      tags:
        - Task
      description: This entpoint allows to update a task
      security:
        - ApikeyAuth: []
        - Oauth2: []
      parameters:
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
          description: The Id of the task
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'
      responses:
        200:
          description: Task correctly updated
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/Task'

  /task/transaction:
    post:
      summary: Create a new task transaction
      tags:
        - Task
      security:
        - ApikeyAuth: []
        - Oauth2: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-models-openapi.yaml#/components/schemas/TaskTransaction'
      responses:
        '201':
          description: Transaction correctly submitted
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/EmptyResponse'

  /tasks:
    get:
      tags:
      - Task
      summary: Return a page of task that match the query parameters
      description: Allow to get a page of task with the specified query parameters
      security:
        - ApikeyAuth: []
        - Oauth2: []
      parameters:
      - name: appId
        in: query
        description: An application identifier to be equals on the tasks to return. You can use a Perl compatible regular expressions (PCRE) that has to match the application identifier of the tasks to return if you write between '/'. For example to get the tasks for the applications '1' and '2' you must pass as 'appId' '/^[1|2]$/'.
        schema:
          type: string
          example: "1"
      - name: requesterId
        in: query
        description: An user identifier to be equals on the tasks to return. You can use a Perl compatible regular expressions (PCRE) that has to match the requester identifier of the tasks to return if you write between '/'. For example to get the tasks for the requesters '1' and '2' you must pass as 'requesterId' '/^[1|2]$/'.
        schema:
          type: string
          example: 1e346fd440
      - name: taskTypeId
        in: query
        description: A task type identifier to be equals on the tasks to return. You can use a Perl compatible regular expressions (PCRE) that has to match the task type identifier of the tasks to return if you write between '/'. For example to get the tasks for the types '1' and '2' you must pass as 'taskTypeId' '/^[1|2]$/'.
        schema:
          type: string
          example: 1e346fd440
      - name: goalName
        in: query
        description: A goal name to be equals on the tasks to return. You can use a Perl compatible regular expressions (PCRE) that has to match the goal name of the tasks to return if you write between '/'. For example to get the tasks with a goal name with the word 'eat' you must pass as 'goalName' '/.eat./'
        schema:
          type: string
          example: .*together.*
      - name: goalDescription
        in: query
        description: A goal description to be equals on the tasks to return. You can use a Perl compatible regular expressions (PCRE) that has to match the goal description of the tasks to return if you write between '/'. For example to get the tasks with a goal description with the word 'eat' you must pass as 'goalDescription' '/.eat./'
        schema:
          type: string
          example: .*dinner.*
      - name: creationFrom
        in: query
        description: The difference, measured in seconds, between the minimum creation time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
          example: 1457166440
      - name: creationTo
        in: query
        description: The difference, measured in seconds, between the maximum creation time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
          example: 1571664406
      - name: updateFrom
        in: query
        description: The difference, measured in seconds, between the minimum update time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
          example: 1457166440
      - name: updateTo
        in: query
        description: The difference, measured in seconds, between the maximum update time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
          example: 1571664406
      - name: hasCloseTs
        in: query
        description: This is 'true' if the task to return has defined a 'closeTs', or 'false' if this fiels is not defined. In other words, get the closed or open tasks.
        schema:
          type: boolean
          example: false
      - name: closeFrom
        in: query
        description: The difference, measured in seconds, between the minimum close time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
          example: 1457166440
      - name: closeTo
        in: query
        description: The difference, measured in seconds, between the maximum close time stamp of the task and midnight, January 1, 1970 UTC.
        schema:
          type: integer
          format: int64
          example: 1571664406
      - name: order
        in: query
        description: The order in witch the tasks have to be returned. For each field it has be separated by a ',' and each field can start with '+' (or without it) to order on ascending order, or with the prefix '-' to do on descendant order.
        schema:
          type: string
          example: goal.name,-goal.description,+appId
      - name: offset
        in: query
        description: The index of the first task to return.
        schema:
          type: integer
          format: int32
          example: 4
          default: 0
      - name: limit
        in: query
        description: The number maximum of tasks to return.
        schema:
          type: integer
          format: int32
          example: 100
          default: 10
      responses:
        '200':
          description: The task associated to the identifier
          content:
            application/json:
              schema:
                $ref: 'https://bitbucket.org/wenet/wenet-components-documentation/raw/master/sources/wenet-task_manager-openapi.yaml#/components/schemas/TaskPage'

  /log/messages:
    post:
      summary: Post log messages
      tags:
        - Logging
      security:
        - ApikeyAuth: []
        - Oauth2: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Messages'
      responses:
        '201':
          description: Messages correctly logged
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/EmptyResponse'

components:

  securitySchemes:

    ApikeyAuth:
      type: apiKey
      in: header
      name: apikey

    Oauth2:
      type: http
      scheme: bearer
      bearerFormat: oauth2

  schemas:

    CreateUpdateTsDetails:
      type: object
      properties:
        creationTs:
          type: integer
          readOnly: true
          description: The UTC epoch timestamp representing the account creation instant
          example: 1563871899
        lastupdateTs:
          type: integer
          readOnly: true
          description: The UTC epoch timestamp representing the last update instant
          example: 1563898764

    # App

    App:
      description: The app of a wenet use case scenario
      allOf:
        - $ref: '#/components/schemas/CreateUpdateTsDetails'
      properties:
        appId:
          type: string
          description: The Id of the wenet app
          example: 3e557acc-e846-4736-8218-3f64d8e68d8c
          readOnly: true
        messageCallbackUrl:
          type: string
          nullable: true
          description: The endpoint responsible for receiving the messages generated by the wenet platform for the users
          example: https://app.endpoint.com/messages
        metadata:
          type: object
          description: App metadata (such as its name and description)

    # Messages
    
    Messages:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/RequestMessage'
          - $ref: '#/components/schemas/ResponseMessage'
          - $ref: '#/components/schemas/NotificationMessage'


    RequestMessage:
      type: object
      properties:
        messageId:
          type: string
          example: "2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8"
        channel:
          type: string
          example: "FACEBOOK"
        userId:
          type: string
          example: "USR-JDKHEIU2-31NJDTE94"
        timestamp:
          type: string
          example: "2019-04-04:23.11.58"
        content:
          oneOf:
            - $ref: '#/components/schemas/TextualContent'
            - $ref: '#/components/schemas/ActionContent'
            - $ref: '#/components/schemas/ActionRequest'
            - $ref: '#/components/schemas/AttachmentContent'
            - $ref: '#/components/schemas/LocationContent'
            - $ref: '#/components/schemas/CarouselContent'
        project:
          type: string
          example: "wenet"
        metadata:
          type: object
        type:
          type: string
          example: "REQUEST"
      required:
        - messageId
        - channel
        - userId
        - timestamp
        - project
        - type

    ResponseMessage:
      type: object
      properties:
        messageId:
          type: string
          example: "2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8"
        channel:
          type: string
          example: "FACEBOOK"
        userId:
          type: string
          example: "USR-JDKHEIU2-31NJDTE94"
        responseTo:
          type: string
          example: "1FKNSM-GEKRO2-DANK2-FJ33-DASDJOW"
        timestamp:
          type: string
          example: "2019-04-04:23.11.58"
        content:
          oneOf:
            - $ref: '#/components/schemas/TextualContent'
            - $ref: '#/components/schemas/ActionContent'
            - $ref: '#/components/schemas/ActionRequest'
            - $ref: '#/components/schemas/AttachmentContent'
            - $ref: '#/components/schemas/LocationContent'
            - $ref: '#/components/schemas/CarouselContent'
        metadata:
          type: object
        project:
          type: string
          example: 'wenet'
        type:
          type: string
          example: "RESPONSE"
      required:
        - messageId
        - channel
        - userId
        - responseTo
        - timestamp
        - project
        - type

    NotificationMessage:
      type: object
      properties:
        messageId:
          type: string
          example: "2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8"
        channel:
          type: string
          example: "FACEBOOK"
        userId:
          type: string
          example: "USR-JDKHEIU2-31NJDTE94"
        timestamp:
          type: string
          example: "2019-04-04:23.11.58"
        content:
          oneOf:
            - $ref: '#/components/schemas/TextualContent'
            - $ref: '#/components/schemas/ActionContent'
            - $ref: '#/components/schemas/ActionRequest'
            - $ref: '#/components/schemas/AttachmentContent'
            - $ref: '#/components/schemas/LocationContent'
            - $ref: '#/components/schemas/CarouselContent'
        metadata:
          type: object
        project:
          type: string
          example: "wenet"
        type:
          type: string
          example: "NOTIFICATION"
      required:
        - messageId
        - channel
        - userId
        - timestamp
        - project
        - type

    LocationContent:
      type: object
      properties:
        type:
          type: string
          example: 'location'
        lon:
          type: string
          example: '49.3128319'
        lat:
          type: string
          example: '8.3189321'
        buttons:
            type: array
            items:
              $ref: '#/components/schemas/ActionContent'
      required:
        - type
        - longitude
        - latitude

    TextualContent:
      type: object
      properties:
        type:
          type: string
          example: "text"
        value:
          type: string
          example: "I want to go hiking"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/ActionContent'
      required:
        - type
        - value

    ActionRequest:
      type: object
      properties:
        type:
          type: string
          example: "action"
        value:
          type: string
          example: "Let's do it!"
      required:
        - type
        - value

    ActionContent:
      type: object
      properties:
        type:
          type: string
          example: "action"
        buttonText:
          type: string
          example: "Cerca hotel"
        buttonId:
          type: string
          example: "BTN-DAJKSOD142-ADFGWE2"
      required:
        - type
        - buttonText

    AttachmentContent:
      type: object
      properties:
        type:
          type: string
          example: "attachment"
        uri:
          type: string
          example: "http://image.com/image.png"
        alternativeText:
          type: string
          example: "An hotel"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/ActionContent'
      required:
        - type
        - uri

    CarouselContent:
        type: object
        properties:
          type:
            type: string
            example: "carousel"
          cards:
            type: array
            items:
              $ref: '#/components/schemas/Card'
        required:
          - type
          - cards

    Card:
      type: object
      properties:
          title:
            type: string
            example: "Hiking activity"
          imageUrl:
            type: string
            example: "http://www.google.com/logo.png"
          subtitle:
            type: string
            example: "you should hike"
          defaultAction:
            type: object
          buttons:
            type: array
            items:
              $ref: '#/components/schemas/ActionContent'
      required:
        - title

    # Token

    TokenDetails:
      type: object
      properties:
        profileId:
          type: string
          readOnly: true
          description: the id of the profile
        appId:
          type: string
          readOnly: true
          description: The id of the app that has requested the token
        scopes:
          type: array
          description: The list of scopes
          items:
            type: string

    # Response

    EmptyResponse:
      type: object
