swagger: "2.0"
info:
  description: "This component builds and maintains the social part of a userÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s profile, by analyzing the data collected by the various Common component connectors. The component falls into three main categories.<br /> (1) Accessing and updating the userÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s social relations. <br />E.g., based on past evidence, Alice is a friend of Bob with weight 0.8.<br /> Depending on the type of the relation, the weight can be interpreted as a degree of confidence on whether the relation is actually present (e.g., how confident we are that Alice and Bob really relatives), or as a degree of strength of that relation (e.g., how close friends Alice and Bob are).<br /> (2) Accessing and updating the userÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s social preferences in ranking users for a task.<br /> E.g., for a task that requires the use of a car, rank higher a volunteer with more driving experience than a person that lives closer to the user.<br /> This functionality can be used either to rank a list of volunteers that has been computed elsewhere, or to rank a list of users that could lead to identifying and suggesting potentially new relations between the user and other users.<br /> (3) Accessing and updating social explanations on the inclusion of volunteers.<br /> E.g., for a task that requires help with moving, explain that a volunteer was included because they own a car and have helped others move in the past.<br /> This functionality is not aimed to identify the relevant information, which should be already included in the volunteerÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s profile or in the norms that were applied in selecting that volunteer. Instead, this functionality is aimed to return explanations (based on that information) that are ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“convincingÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬\x9D to the user."
  version: 2.0.0
  title: Social Learning API
  contact:
    email: christos.michail@ouc.ac.cy
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Social Relations
    description: Operations that manipulate the social relations
  - name: Social User Ranking
    description: Operations that relate with user to user social ranking and social preferences
  - name: Social Explanations
    description: Accessing and updating social explanations on the inclusion of volunteers
  - name: Transaction Notifications
    description: Social interaction notifications
paths:
  '/social/relations/{userID}':
    get:
      tags:
        - Social Relations
      summary: Returns the user IDs that the user has relations
      description: 'Returns User IDs that the user has the filtered relations. Quering without a relation returns all users that have a relation with weight > 0 with the user. Quering for one relation type it returns all the users that have that type relation with weight > 0. Finally, by quering for multiple relation types by summing the integer of types you get users that have all type relations with the user.'
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
        - in: query
          name: Relation_Type
          description: Relation Type to Filter
          required: false
          type: integer
          enum:
            - family
            - friend
            - contact
            - colleague
            - other
      produces:
        - application/json
      responses:
        '200':
          description: User Relations
          schema:
            type: array
            items:
              $ref: '#/definitions/user_relation'
        '401':
          description: Unknown user ID
  '/social/relations/initialize/{userID}':
    post:
      tags:
        - Social Relations
      summary: Initializes the relation of the user with the rest users of the platfom
      description: 'Creates the relation among  the user with the rest users of the platfom and sets the initial weight.'
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
      responses:
        '200':
          description: Creation successful
        '401':
          description: Creation failed
  '/social/notification':
    post:
      tags:
        - Transaction Notifications
      summary: Notifies for the interaction of user with another user
      description: 'Notifies for the interaction of user with another user.'
      parameters:
        - in: body
          name: data
          description: data
          required: true
          schema:
             $ref: '#/definitions/user_messages'
      responses:
        '200':
          description: Received notification
        '401':
          description: Notification failed
  '/social/explanations/{userID}/{taskID}/update':
    put:
      tags:
        - Social Explanations
      summary: Updates a social explanation structure for the user
      description: Updates a social explanation structure for the user. This is contextualized on the type of task.
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
        - in: path
          name: taskID
          description: User ID
          required: true
          type: string
      responses:
        '200':
          description: Social Explanation
        '401':
          description: Unknown user ID
  '/social/explanations/{userID}/{taskID}':
    get:
      tags:
        - Social Explanations
      summary: Returns the social explanation structure for the user
      description: Returns the social explanation structure for the user. This is contextualized on the type of task.
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
        - in: path
          name: taskID
          description: User ID
          required: true
          type: string
      responses:
        '200':
          description: Social Explanation
        '401':
          description: Unknown user ID
  '/social/preferences/{userID}/{taskID}':
    post:
      tags:
        - Social User Ranking
      summary: Returns an ordered list of Users based on social preferences
      description: Given a list of users and a message thread it returns an ordered list of Users based on the users social preferences. Computed on-demand and immediatly return the result (result is up to date). Uses data structures that have been learned at a batch cycle.
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
        - in: path
          name: taskID
          description: 'Task ID, the exact form and what a Task ID is it is TBD'
          required: true
          type: string
        - in: body
          name: users_IDs
          description: Message ID
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Ordered list of User IDs
          schema:
            type: array
            items:
              type: string
  '/social/preferences/answers/{userID}/{taskID}':
    post:
      tags:
        - Social User Ranking
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
        - in: path
          name: taskID
          type: string
          description: 'Task ID, the exact form and what a Task ID is it is TBD'
          required: true
        - in: body
          name: data
          description: data
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/user_answer'
            example:
             - userId: '14'
               answer: The best pizza is in Napoli!
             - userId: '36'
               answer: You can find a good one in Rome
             - userId: '3'
               answer: can't beat homemade
      responses:
        '200':
          description: Ranked list of answers to a task bases on social preferences
          schema:
            type: array
            items:
              $ref: '#/definitions/user_answer'
            example:
             - userId: '36'
               answer: You can find a good one in Rome
             - userId: '14'
               answer: The best pizza is in Napoli!
             - userId: '3'
               answer: can't beat homemade
  '/social/preferences/answers/{userID}/{taskID}/{selection}/update':
    put:
      tags:
        - Social User Ranking
      summary: Updates ranking structures based on previous user 
      description: Given a set of ranked users it creates the underlying structure to rank users in a similar way. The structure is stored under a Task Tag-ID.
      parameters:
        - in: path
          name: userID
          description: User ID
          required: true
          type: string
        - in: path
          name: taskID
          description: 'Task ID, the exact form and what a Task ID is it is TBD'
          required: true
          type: string
        - in: path
          type: integer
          name: selection
          description: 'The selection of the user as a place in the list starting from 0'
          required: true
        - in: body
          name: data
          description: A ranked list that was suggested to the user
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/user_answer'
            example:
             - userId: '14'
               answer: The best pizza is in Napoli!
             - userId: '36'
               answer: You can find a good one in Rome
             - userId: '3'
               answer: can't beat homemade
      responses:
        '200':
          description: Created Structure succesfully

definitions:
  volunteerfortask:
      type: object
      description: Accept to attent the event
      properties:
       volunteerId:
        type: string
        description: volunteer ID as a unique identifier
  refuseTask:
    type: object
    description: refuseto attent the event
    properties:
     volunteerId:
      type: string
      description: volunteer ID as a unique identifier
  refuseVolunteer:
   type: object
   description: refuse a volunteer to attent the event
   properties:
    volunteerId:
     type: string
     description: volunteer ID as a unique identifier
  TaskCompleted:
   type: object
   description: Finish the task
   properties:
    outcome:
     type: string
     enum: ['cancelled','completed','failed']
  user_relation:
    type: object
    description: A User to User relation.
    properties:
      UserId:
        type: string
        example: bf274393-1e7b-4d40-a897-88cb96277edd
        description: User ID 1 a unique identifier
      RelationType:
        type: string
        enum:
          - friend
        example: friend
        description: The relation type among the two users
      Weight:
        type: number
        example: 0.6
        description: A number from 0 to 1 that indicates the strength of the relation. 0 indicates a deleted/non-exisiting relation.
  user_answer:
    type: object
    description: A User to User answer.
    properties:
      userId:
        type: string
        example: bf274393-1e7b-4d40-a897-88cb96277edd
        description: User ID 1 a unique identifier
      answer:
        type: string
        example: the best pizza is in Napoli! 
        description: answer for this task
  user_profile:
    type: object
    description: User Profile Personal Information. What is filled by user.
    properties:
      id:
        type: string
        example: bf274393-1e7b-4d40-a897-88cb96277edd
        description: User ID a unique identifier
      birth_date:
        type: string
        format: yyyy-mm-dd
        example: '1981-02-01'
        description: User Birth Date following ISO 8601 (required).
      nationality:
        type: string
        example: Italian
        description: The nationality of the user (could be multiple?)
      ethnic_group:
        type: string
        example: Roma
        description: The ethnic group of the user (could be multiple?)
      sex:
        type: string
        example:
          - male
          - female
          - other?
        description: User Biological Sex (required) --TBD--.
      occupation:
        description: Users main occupation (optional) --TBD--.
        type: object
        properties:
          title:
            type: string
            description: 'Occupation Title: student, alumni, employee.'
          program:
            type: object
            description: University related program --TBD--.
      locations:
        description: User different locations (optional) --TBD--.
        type: array
        items:
          $ref: '#/definitions/location'
      other:
        type: object
        description: All user related information that we can get!
  user_metadata:
    type: object
    description: User Profile Personal Information. What is filled by user.
    properties:
      user_id:
        type: string
        description: User ID
      app_usage:
        type: array
        description: Application Usage History
        items:
          type: object
      external_app_usage:
        type: array
        description: Other Applications that can be monitored?
        items:
          type: object
      loc_history:
        type: array
        description: User Visited locations
        items:
          type: object
          properties:
            latitude:
              type: integer
            longtitude:
              type: integer
            poi:
              type: object
              description: The google pin/business or something
      other:
        type: object
        description: Whatever other useful information we can get?
  user_friends:
    type: object
    description: The list with the user friends
    properties:
      user_id:
        type: string
      friends:
        type: array
        items:
          type: object
          properties:
            user_id:
              type: string
            status:
              type: string
              description: 'Current status, open to more suggestions here!'
              enum:
                - added
                - removed
                - blocked
                - suggested
                - ignored_suggestion
  message_thread:
    type: object
    description: An ordered thread of messages
    properties:
      thread_id:
        type: string
        description: Thread ID
      messages:
        type: array
        description: The messages in the thread
        items:
          $ref: '#/definitions/user_messages'
  user_messages:
    type: object
    description: User messages.
    properties:
      taskId:
        type: string
        description: Task ID
      senderId:
        type: string
        description: Sender Id
      transactionId:
        type: string
        description: Transaction ID
      timestamp:
        type: integer
        description: Transaction ID
        example: 1563930000
      message:
       type: object
       description: User message.
       properties:
        appId:
          type: string
          description: App ID where message was sent
        receiverId:
          type: string
          description: User ID of receiving message
        label:
         type: string
         description: Transaction type label
         example: QuestionToAnswerMessage
        attributes:
          type: object
          description: attributes of the message
  competence:
    description: A competence that an user can do.
    type: object
    properties:
      name:
        type: string
        example: cooking
        description: The name of the competence
      level:
        type: string
        example: Expert
        description: The ability level of the person in the competence.
        enum:
          - Beginner
          - Apprentice
          - Intermediate
          - Advanced
          - Expert
  location:
    type: object
    description: A user location
    properties:
      label:
        type: string
        example: Home
        description: The description of the location.
      geolocation:
        $ref: '#/definitions/geolocation'
      address:
        type: object
        description: Physical Address --TBD--
  geolocation:
    description: The geographic coordinates of a location.
    type: object
    properties:
      latitude:
        type: number
        example: 42.4371685
        description: The latitude coordinate of the location. (Google format?)
      longitude:
        type: number
        example: 1.9331308
        description: The longitude coordinate of the location. (Google format?)
      poi:
        type: string
        example: EisxMyBNYXJrZXQgU3RyZWV0LCBXaWxtaW5ndG9uLCBOQyAyODQwMSwgVVNB
        description: The identifier that uniquely identifies the location.
host: wenet.u-hopper.com
basePath: /social_context_builder
schemes:
  - https