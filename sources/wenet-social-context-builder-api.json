{
  "swagger": "2.0",
  "info": {
    "description": "Component that handle the social context of the users <br /> Task 1 -- Ordering Users by social preferences. The task has both a batch and an on demand part. <br /> <img src=\"https://drive.google.com/uc?id=1BP_ZbcfVkPaUQVUyJh59b8ljuFDRTHwE\" /> <br />Task 2 -- Suggesting new friends. This task is fully backend and is performed as batch job. <br />Task 3 -- Learning norms from social habbits. To be discussed... <br />",
    "version": "2.0.0",
    "title": "Social Learning API",
    "contact": {
      "email": "theo.mantadelis@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "online",
      "description": "Operations that are computed on-demand and immediatly return the result (result is up to date)"
    },
    {
      "name": "offline",
      "description": "Operations that have been computed on a batch circle and only return latest result (result might be obsolete)"
    },
    {
      "name": "others",
      "description": "Operations required from others kept for reference (to be removed when documented by others)"
    }
  ],
  "paths": {
    "/profiles": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Gets all user profile IDs",
        "operationId": "profiles",
        "description": "Gets all user profile IDs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/profile_personal": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Get user profile by ID",
        "operationId": "profile_personal",
        "description": "Get user profile by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ID",
            "description": "User Profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User Profile",
            "schema": {
              "$ref": "#/definitions/user_profile"
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/profile_metadata": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Get user metadata profile by ID",
        "operationId": "profile_metadata",
        "description": "Get user metadata profile by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ID",
            "description": "User Profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User Profile",
            "schema": {
              "$ref": "#/definitions/user_metadata"
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/profile_friends": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Get user friend list by ID",
        "operationId": "profile_friends",
        "description": "Get user friend list by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ID",
            "description": "User Profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User Friends List",
            "schema": {
              "$ref": "#/definitions/user_friends"
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/profile_message_threads": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Get user message thread IDs by user ID",
        "operationId": "profile_message_threads",
        "description": "Get user message thread IDs by user ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ID",
            "description": "User Profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "All message thread IDs that a user participated",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/profile_message": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Get a message by message ID",
        "operationId": "profile_message",
        "description": "Get a message by message ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ID",
            "description": "User Profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A message transaction",
            "schema": {
              "$ref": "#/definitions/user_messages"
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/profile_thread": {
      "get": {
        "tags": [
          "others"
        ],
        "summary": "Get a thread by thread ID",
        "operationId": "profile_thread",
        "description": "Get a thread by thread ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ID",
            "description": "User Profile ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A message thread",
            "schema": {
              "$ref": "#/definitions/message_thread"
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/order_users_by_social_preference": {
      "post": {
        "tags": [
          "online"
        ],
        "summary": "Given a list of users and a message thread it returns an ordered list of Users based on the users social preferences",
        "description": "Returns an ordered list of Users based on social preferences",
        "parameters": [
          {
            "in": "query",
            "name": "UID",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "msg_ID",
            "description": "Message ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "users_IDs",
            "description": "Message ID",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ordered list of User IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/suggest_friends": {
      "post": {
        "tags": [
          "offline"
        ],
        "summary": "Returns a sorted list of Users that are suggested to be added as friends",
        "description": "Returns a sorted list of Users that are suggested to be added as friends",
        "parameters": [
          {
            "in": "query",
            "name": "UID",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sorted a List of User IDs to be suggested as friends",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/learn_norms": {
      "post": {
        "tags": [
          "offline"
        ],
        "summary": "Learns underlined community rules to be introduced as norms",
        "description": "Returns learned norms from community messages",
        "parameters": [
          {
            "in": "query",
            "name": "CID",
            "description": "Community ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Norms in form of Prolog predicates",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "user_profile": {
      "type": "object",
      "description": "User Profile Personal Information. What is filled by user.",
      "properties": {
        "id": {
          "type": "string",
          "example": "bf274393-1e7b-4d40-a897-88cb96277edd",
          "description": "User ID a unique identifier"
        },
        "birth_date": {
          "type": "string",
          "format": "yyyy-mm-dd",
          "example": "1981-02-01",
          "description": "User Birth Date following ISO 8601 (required)."
        },
        "nationality": {
          "type": "string",
          "example": "Italian",
          "description": "The nationality of the user (could be multiple?)"
        },
        "ethnic_group": {
          "type": "string",
          "example": "Roma",
          "description": "The ethnic group of the user (could be multiple?)"
        },
        "sex": {
          "type": "integer",
          "enum": [
            "male",
            "female",
            "other?"
          ],
          "description": "User Biological Sex (required) --TBD--."
        },
        "languages": {
          "description": "A list of user known languages (required 1 min).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/language"
          }
        },
        "competences": {
          "description": "A list with user competences and skill level (optional).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/competence"
          }
        },
        "intelligences": {
          "$ref": "#/definitions/intelligences"
        },
        "perconality": {
          "$ref": "#/definitions/personality"
        },
        "occupation": {
          "description": "Users main occupation (optional) --TBD--.",
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Occupation Title: student, alumni, employee."
            },
            "program": {
              "type": "object",
              "description": "University related program --TBD--."
            }
          }
        },
        "locations": {
          "description": "User different locations (optional) --TBD--.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "other": {
          "type": "object",
          "description": "All user related information that we can get!"
        }
      }
    },
    "user_metadata": {
      "type": "object",
      "description": "User Profile Personal Information. What is filled by user.",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID"
        },
        "app_usage": {
          "type": "array",
          "description": "Application Usage History",
          "items": {
            "type": "object"
          }
        },
        "external_app_usage": {
          "type": "array",
          "description": "Other Applications that can be monitored?",
          "items": {
            "type": "object"
          }
        },
        "loc_history": {
          "type": "array",
          "description": "User Visited locations",
          "items": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "integer"
              },
              "longtitude": {
                "type": "integer"
              },
              "poi": {
                "type": "object",
                "description": "The google pin/business or something"
              }
            }
          }
        },
        "other": {
          "type": "object",
          "description": "Whatever other useful information we can get?"
        }
      }
    },
    "user_friends": {
      "type": "object",
      "description": "The list with the user friends",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "friends": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "description": "Current status, open to more suggestions here!",
                "enum": [
                  "added",
                  "removed",
                  "blocked",
                  "suggested",
                  "ignored_suggestion"
                ]
              }
            }
          }
        }
      }
    },
    "message_thread": {
      "type": "object",
      "description": "An ordered thread of messages",
      "properties": {
        "thread_id": {
          "type": "string",
          "description": "Thread ID"
        },
        "messages": {
          "type": "array",
          "description": "The messages in the thread",
          "items": {
            "$ref": "#/definitions/user_messages"
          }
        }
      }
    },
    "user_messages": {
      "type": "object",
      "description": "User messages.",
      "properties": {
        "msg_id": {
          "type": "string",
          "description": "Message ID"
        },
        "user_id_from": {
          "type": "string",
          "description": "User ID of sending user"
        },
        "user_id_to": {
          "type": "string",
          "description": "User ID of receiving message (this is for private messages and can be null)"
        },
        "thread_id": {
          "type": "string",
          "description": "Message Thread ID (this message is public to all that have access to thread)"
        },
        "msg_keywords": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Message Keywords (can be seen as message type)"
          }
        },
        "msg_text": {
          "type": "string",
          "description": "Message"
        },
        "other": {
          "type": "object",
          "description": "Other Message information"
        }
      }
    },
    "language": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "English",
          "description": "Language Name."
        },
        "code": {
          "type": "string",
          "example": "en",
          "description": "Langugage ISO 639-1 code."
        },
        "level": {
          "type": "string",
          "example": "B2",
          "description": "User Proficiency of Language."
        }
      }
    },
    "intelligences": {
      "type": "object",
      "description": "Provide information about the intelligences of a person",
      "properties": {
        "visual_spatial": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.3,
          "description": "The visual-spatial intelligence"
        },
        "logic_mathematics": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.2,
          "description": "The logic-mathematics intelligence"
        },
        "musical_rhythmic": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.5,
          "description": "The musical-rhythmic intelligence"
        },
        "verbal": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.1,
          "description": "The verbal intelligence"
        },
        "kinestesica_corporal": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.4,
          "description": "The kinestesica-corporal intelligence"
        },
        "interpersonal": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.7,
          "description": "The interpersonal intelligence"
        },
        "naturalist_environmental": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.8,
          "description": "The naturalist-environmental intelligence"
        },
        "intrapersonal": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.6,
          "description": "The intrapersonal intelligence"
        }
      }
    },
    "personality": {
      "type": "object",
      "description": "Provide information about the personality of a person",
      "properties": {
        "judgment": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.2,
          "description": "The judgment grade of a person"
        },
        "extrovert": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.3,
          "description": "The extrovert grade of a person"
        },
        "perception": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.1,
          "description": "The perception grade of a person"
        },
        "attitude": {
          "type": "number",
          "format": "double",
          "maximum": 1,
          "minimum": 0,
          "example": 0.4,
          "description": "The attitude grade of a person"
        }
      }
    },
    "competence": {
      "description": "A competence that an user can do.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "cooking",
          "description": "The name of the competence"
        },
        "level": {
          "type": "string",
          "example": "Expert",
          "description": "The ability level of the person in the competence.",
          "enum": [
            "Beginner",
            "Apprentice",
            "Intermediate",
            "Advanced",
            "Expert"
          ]
        }
      }
    },
    "location": {
      "type": "object",
      "description": "A user location",
      "properties": {
        "label": {
          "type": "string",
          "example": "Home",
          "description": "The description of the location."
        },
        "geolocation": {
          "$ref": "#/definitions/geolocation"
        },
        "address": {
          "type": "object",
          "description": "Physical Address --TBD--"
        }
      }
    },
    "geolocation": {
      "description": "The geographic coordinates of a location.",
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "example": 42.4371685,
          "description": "The latitude coordinate of the location. (Google format?)"
        },
        "longitude": {
          "type": "number",
          "example": 1.9331308,
          "description": "The longitude coordinate of the location. (Google format?)"
        },
        "poi": {
          "type": "string",
          "example": "EisxMyBNYXJrZXQgU3RyZWV0LCBXaWxtaW5ndG9uLCBOQyAyODQwMSwgVVNB",
          "description": "The identifier that uniquely identifies the location."
        }
      }
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/theomantadelis/cpnet_reasoning/1.0.0",
  "schemes": [
    "https"
  ]
}