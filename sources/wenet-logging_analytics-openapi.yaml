# OpenAPI version identifier - required for OpenAPI 3.0 domains
openapi: 3.0.0

#######################
# Optional info section
#######################
info:
  title: WeNet - Interactions Logger and Analytics APIs
  description: This component is responsible for collecting and analyzing the messages produced by the WeNet applications together with lower level component logs that allow to monitor the functioning of the applications built on top of the platform and of the platform itself.

  contact:
    email: "carlo.caprini@u-hopper.com"

tags:
  - name: message
    description: APIs allowing to register incoming and outgoing messages of a conversation
  - name: logging
    description: APIs allowing to log events
  - name: analytics
    description: APIs to retrieve analytics based on both messages and event logs


paths:
    # MESSAGES APIs

    /logging/messages:
      post:
        tags:
          - message
        summary: Add a batch of messages to the database
        description: This end-point allows to log a set of messages into the database
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        responses:
          '201':
            description: success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_201'
          '405':
            description: malformed message
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_405'

    /logging/message:
      get:
        tags:
          - message
        summary: Retrieve a single message by specifying the trace id
        description: This end-point can be used to retrieve all the information of a single message
        parameters:
          - in: query
            name: project
            schema:
              type: string
            required: true
            description: the name of the project related to the message you want to retrieve
          - in: query
            name: messageId
            schema:
              type: string
            required: true
            description: the id of the message you want to retrieve
        responses:
          '200':
            description: success
            content:
              application/json:
                schema:
                  oneOf:
                  - $ref: '#/components/schemas/RequestMessage'
                  - $ref: '#/components/schemas/ResponseMessage'
                  - $ref: '#/components/schemas/NotificationMessage'

          '404':
            description: message not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_404'

      put:
        tags:
          - message
        summary: Update a message
        description: Update a message that is already stored
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The id of the message
        responses:
          '200':
            description: Message updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_201'
          '404':
            description: message not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_404'

      delete:
        tags:
          - message
        summary: Delete a message
        description: This method should be used to delete a message from the database
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The id of the message
        responses:
          '200':
            description: Message removed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_200'
          '404':
            description: message not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_404'



    # GENERAL LOGGING APIS

    /logging/logs:
      post:
        tags:
          - logging
        summary: Add a batch of messages to the database
        description: This end-point allows to log a set of messages into the database
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
        responses:
          '201':
            description: success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_201'
          '405':
            description: malformed log
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_405'

    /logging/log/{id}:
      get:
        tags:
          - logging
        summary: Retrieve a single log by specifying the trace id
        description: This end-point can be used to retrieve all the information of a single log
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The trace id of the log
        responses:
          '200':
            description: success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Log'

          '404':
            description: log not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_404'

      put:
        tags:
          - logging
        summary: Update an already existing log
        description: This method should be used to update existing logs
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The id of the log
        responses:
          '200':
            description: Log updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_201'
          '404':
            description: Log not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_404'

      delete:
        tags:
          - logging
        summary: Delete a log
        description: This method should be used to delete a log from the database
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The  id of the log
        responses:
          '200':
            description: Log removed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_200'
          '404':
            description: Log not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HTTP_404'


components:

  ####################
  # Common data models
  ####################
  schemas:

    Messages:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/RequestMessage'
          - $ref: '#/components/schemas/ResponseMessage'
          - $ref: '#/components/schemas/NotificationMessage'


    RequestMessage:
      type: object
      properties:
        messageId:
          type: string
          example: "2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8"
        channel:
          type: string
          example: "FACEBOOK"
        userId:
          type: string
          example: "USR-JDKHEIU2-31NJDTE94"
        conversationId:
          type: string
          example: "CONV-DAJKWPENVOA-314CAD"
        timestamp:
          type: string
          example: "2019-04-04:23.11.58"
        content:
          oneOf:
            - $ref: '#/components/schemas/TextualRequest'
            - $ref: '#/components/schemas/ActionRequest'
            - $ref: '#/components/schemas/AttachmentRequest'
            - $ref: '#/components/schemas/LocationRequest'
            - $ref: '#/components/schemas/UserInfoRequest'
          example: "devo fare un bonifico di 40 euro"
        domain:
          type: string
          example: "pagamenti"
        intent:
          type: object
          properties:
            name:
              type: string
              example: "bonifico"
            confidence:
              type: number
              format: float
              example: 0.87
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        project:
          type: string
          example: "wenet"
        language:
          type: string
          example: "IT"
        metadata:
          type: object
        type:
          type: string
          example: "REQUEST"
      required:
        - messageId
        - channel
        - userId
        - timestamp
        - project
        - type

    ResponseMessage:
      type: object
      properties:
        messageId:
          type: string
          example: "2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8"
        conversationId:
          type: string
          example: "CONV-DOWI41-DAJPRTI3"
        channel:
          type: string
          example: "FACEBOOK"
        userId:
          type: string
          example: "USR-JDKHEIU2-31NJDTE94"
        responseTo:
          type: string
          example: "1FKNSM-GEKRO2-DANK2-FJ33-DASDJOW"
        timestamp:
          type: string
          example: "2019-04-04:23.11.58"
        content:
            anyOf:
              - $ref: '#/components/schemas/TextualResponse'
              - $ref: '#/components/schemas/MultiActionResponse'
              - $ref: '#/components/schemas/AttachmentResponse'
              - $ref: '#/components/schemas/CarouselResponse'
              - $ref: '#/components/schemas/LocationResponse'
        metadata:
          type: object
        project:
          type: string
          example: 'wenet'
        type:
          type: string
          example: "RESPONSE"
      required:
        - messageId
        - channel
        - userId
        - responseTo
        - timestamp
        - project
        - type

    NotificationMessage:
      type: object
      properties:
        messageId:
          type: string
          example: "2A6F67A4-42D2-4DE0-9F00-DE4A564A83A8"
        conversationId:
          type: string
          example: "CONV-DOWI41-DAJPRTI3"
        channel:
          type: string
          example: "FACEBOOK"
        userId:
          type: string
          example: "USR-JDKHEIU2-31NJDTE94"
        timestamp:
          type: string
          example: "2019-04-04:23.11.58"
        content:
            anyOf:
              - $ref: '#/components/schemas/TextualResponse'
              - $ref: '#/components/schemas/ActionResponse'
              - $ref: '#/components/schemas/AttachmentResponse'
              - $ref: '#/components/schemas/CarouselResponse'
              - $ref: '#/components/schemas/LocationResponse'
        metadata:
          type: object
        project:
          type: string
          example: "wenet"
        type:
          type: string
          example: "NOTIFICATION"
      required:
        - messageId
        - channel
        - userId
        - timestamp
        - project
        - type


    LocationRequest:
      type: object
      properties:
        type:
          type: string
          example: 'location'
        longitude:
          type: string
          example: '47.3123451'
        latitude:
          type: string
          example: '9.321151'
      required:
        - type
        - longitude
        - latitude

    LocationResponse:
      type: object
      properties:
        type:
          type: string
          example: 'location'
        longitude:
          type: string
          example: '49.3128319'
        latitude:
          type: string
          example: '8.3189321'
        buttons:
            type: array
            items:
              $ref: '#/components/schemas/ActionResponse'
      required:
        - type
        - longitude
        - latitude

    UserInfoRequest:
      type: object
      properties:
        type:
          type: string
          enum: ['firstName','lastName','profilePic','locale','timezone','gender','isPaymentEnable','userId']
        value:
          type: string
      required:
        - type
        - value


    TextualRequest:
      type: object
      properties:
        type:
          type: string
          example: "text"
        value:
          type: string
          example: "I want some wine"
      required:
        - type
        - value

    TextualResponse:
      type: object
      properties:
        type:
          type: string
          example: "text"
        value:
          type: string
          example: "I want to go hiking"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/ActionResponse'
      required:
        - type
        - value

    ActionRequest:
      type: object
      properties:
        type:
          type: string
          example: "action"
        value:
          type: string
          example: "Let's do it!"
      required:
        - type
        - value

    ActionResponse:
      type: object
      properties:
        type:
          type: string
          example: "action"
        buttonText:
          type: string
          example: "Cerca hotel"
        buttonId:
          type: string
          example: "BTN-DAJKSOD142-ADFGWE2"
      required:
        - type
        - buttonText

    MultiActionResponse:
      type: object
      properties:
        type:
          type: string
          example: "multiaction"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/ActionResponse'


    AttachmentRequest:
      type: object
      properties:
        type:
          type: string
          example: "attachment"
        uri:
          type: string
          example: "http://image.com/image.png"
        alternativeText:
          type: string
          example: "An hotel"
      required:
        - type
        - uri

    AttachmentResponse:
      type: object
      properties:
        type:
          type: string
          example: "attachment"
        uri:
          type: string
          example: "http://image.com/image.png"
        alternativeText:
          type: string
          example: "An hotel"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/ActionResponse'
      required:
        - type
        - uri

    CarouselResponse:
        type: object
        properties:
          type:
            type: string
            example: "carousel"
          cards:
            type: array
            items:
              $ref: '#/components/schemas/Card'
        required:
          - type
          - cards

    Card:
      type: object
      properties:
          title:
            type: string
            example: "Hiking activity"
          imageUrl:
            type: string
            example: "http://www.google.com/logo.png"
          subtitle:
            type: string
            example: "you should hike"
          defaultAction:
            type: object
          buttons:
            type: array
            items:
              $ref: '#/components/schemas/ActionResponse'
      required:
        - title

    Entity:
      type: object
      properties:
        type:
          type: string
          example: "@city"
        value:
          type: string
          example: "Boston"
        confidence:
          type: number
          format: float
          example: 0.94



    # Schema for an array of Message


    Log:
      type: object
      properties:
        logId:
          type: string
          example: "LOG31235141"
        project:
          type: string
          example: "wenet"
        component:
          type: string
          example: "dimension"
        authority:
          type: string
          example: "nlu"
        severity:
          type: string
          enum: ['error','warning','info','debug']
          example: "error"
        logContent:
          type: string
          example: "bot stopped"
        timestamp:
          type: string
          example: "2019-07-04T08:33:48.35408Z"
        botVersion:
          type: string
          example: "1.0.2"
        metadata:
          type: object

    Logs:
      type: array
      items:
        $ref: '#/components/schemas/Log'

    # Analytics
    Analytic:
      type: object
      properties:
        timespan:
          type: object
          oneOf:
            - $ref: '#/components/schemas/DefaultTime'
            - $ref: '#/components/schemas/CustomTime'
        metric:
           oneOf:
            - $ref: '#/components/schemas/Average'
            - $ref: '#/components/schemas/WeightedAverage'
            - $ref: '#/components/schemas/Cardinality'
            - $ref: '#/components/schemas/GeoBounds'
            - $ref: '#/components/schemas/GeoCentrality'
            - $ref: '#/components/schemas/Max'
            - $ref: '#/components/schemas/Min'
            - $ref: '#/components/schemas/Percentiles'
            - $ref: '#/components/schemas/Sum'
            - $ref: '#/components/schemas/Stats'
            - $ref: '#/components/schemas/Extended'
            - $ref: '#/components/schemas/ValueCount'
            - $ref: '#/components/schemas/MedianAbsoluteDeviation'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
      required:
        - timespan
        - metric

    DefaultTime:
      type: object
      properties:
        type:
          type: string
          enum: ["DEFAULT"]
        value:
          type: string
          enum: ["TODAY","YESTERDAY","7D","30D"]
      required:
        - type
        - value

    CustomTime:
      type: object
      properties:
        type:
          type: string
          enum: ["CUSTOM"]
        start:
          type: string
          format: date-time
          example: "2019-07-23T16:31:24.432000"
        end:
          type: string
          format: date-time
          example: "2019-07-23T16:35:50.00"
      required:
        - type
        - start
        - end

    Average:
      type: object
      properties:
        type:
          type: string
          enum: ["AVG"]
        field:
          type: string
          example: "accuracy"
        missing:
          type: string
          example: "N/A"
      required:
        - type
        - field

    WeightedAverage:
      type: object
      properties:
        type:
          type: string
          enum: ["WAVG"]
        field:
          type: string
          example: "accuracy"
        missing:
          type: string
          example: "N/A"
        weight:
          type: string
          example: "language_frequency"
        format:
          type: string
          enum: ["NUMERIC","PERCENTAGE"]
      required:
        - type
        - field
        - weight

    Cardinality:
      type: object
      properties:
        type:
          type: string
          enum: ["CARDINALITY"]
        field:
          type: string
          example: "language"
        precisionThreshold:
          type: integer
          format: int32
          example: 100
      required:
        - type
        - field

    GeoBounds:
      type: object
      properties:
        type:
          type: string
          enum: ["GEOBOUNDS"]
        field:
          type: string
          example: "zone"
        wrap_longitude:
          type: boolean
          example: True
          default: True
      required:
        - type
        - field

    GeoCentrality:
      type: object
      properties:
        type:
          type: string
          enum: ["GEOCENTRALITY"]
        field:
          type: string
          example: "zone"
      required:
        - type
        - field

    Max:
      type: object
      properties:
        type:
          type: string
          enum: ["MAX"]
        field:
          type: string
          example: "accuracy"
        missing:
          type: number
          format: int32
          example: 10
      required:
        - type
        - field

    Min:
      type: object
      properties:
        type:
          type: string
          enum: ["MIN"]
        field:
          type: string
          example: "accuracy"
        missing:
          type: number
          format: int32
          example: 10
      required:
        - type
        - field

    Percentiles:
      type: object
      properties:
        type:
          type: string
          enum: ["PERCENTILES"]
        field:
          type: string
          example: "age"
        percents:
          type: array
          items:
            type: number
            example: [92.0, 85.0]
            default: [1.0,5.0,25.0,50.0,75.0,95.0,99.0]
      required:
        - type
        - field

    Sum:
      type: object
      properties:
        type:
          type: string
          enum: ["SUM"]
        field:
          type: string
          example: "age"
        missing:
          type: number
          format: int32
          example: 10
      required:
        - type
        - field

    Stats:
      type: object
      properties:
        type:
          type: string
          enum: ["STATS"]
        field:
          type: string
          example: "age"
        missing:
          type: number
          format: int32
          example: 10
      required:
        - type
        - field

    Extended:
      type: object
      properties:
        type:
          type: string
          enum: ["ESTATS"]
        field:
          type: string
          example: "weight"
        missing:
          type: number
          format: int32
          example: 10
      required:
        - type
        - field

    ValueCount:
      type: object
      properties:
        type:
          type: string
          enum: ["VCOUNT"]
        field:
          type: string
          example: "messageID"
      required:
        - type
        - field

    MedianAbsoluteDeviation:
      type: object
      properties:
        type:
          type: string
          enum: ["MAD"]
        field:
          type: string
          example: "weight"
        compression:
          type: number
          format: int32
          example: 100
      required:
        - type
        - field

    Filter:
      type: object
      properties:
        field:
          type: string
          example: "language"
        comparison:
          oneOf:
            - $ref: "#/components/schemas/ValueComparison"
            - $ref: "#/components/schemas/MultiValueComparison"
            - $ref: "#/components/schemas/NumberComparison"
            - $ref: "#/components/schemas/RangeComparison"
            - $ref: "#/components/schemas/FieldExistanceComparison"

          enum: ["IS", "IS_NOT", "IN", "NOT_IN", "EXISTS", "NOT_EXISTS", "BETWEEN"]
    ValueComparison:
      type: object
      properties:
        operator:
          type: string
          enum: ["IS", "IS_NOT"]
        value:
          example: "IT"

    MultiValueComparison:
      type: object
      properties:
        operator:
          type: string
          enum: ["ONE_OF", "IS_NOT_ONE_OF"]
        value:
          type: array
          items:
            anyOf:
              - type: string
              - type: number

    NumberComparison:
      type: object
      properties:
        operator:
          type: string
          enum: ["EQ","NEQ","GR","LE","GREQ","LEQ"]
        value:
          type: number
          example: 40

    RangeComparison:
      type: object
      properties:
        operator:
          type: string
          enum: ["BETWEEN", "NOT_BETWEEN"]
        from:
          example: 1
        to:
          example: 10

    FieldExistanceComparison:
      type: object
      properties:
        operator:
          type: string
          enum: ["EXIST", "NOT_EXIST"]

    # Responses

    HTTP_200:
      type: object
      properties:
        traceId:
          type: string
          example: "DSADK-IPOWN-3G3478"
        status:
          type: string
          example: "Object Created"
        code:
          enum: ['200']
          example: 200

    HTTP_201 :
      type: object
      properties:
        traceId:
          type: string
          example: "DSADK-IPOWN-3G3478"
        status:
          type: string
          example: "Object Created"
        code:
          enum: ['201']
          example: 201


    HTTP_404:
      type: object
      properties:
        traceId:
          type: string
          example: "DSADK-IPOWN-3G3478"
        status:
          type: string
          example: "Cannot find message {traceId}"
        code:
          enum: ['404']
          example: 404

    HTTP_405:
      type: object
      properties:
        traceId:
          type: string
          example: "DSADK-IPOWN-3G3478"
        status:
          type: string
          example: "Field {name} is missing in the message"
        code:
          enum: ['405']
          example: 405
